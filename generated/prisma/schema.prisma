//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  moduleFormat  = "esm"
}

enum UserStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum CustomerType {
  RETAILER
  WHOLESALER
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ItemStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum OrderSystemStatus {
  PENDING
  APPROVED
  ORDER_PROCESSING
  READY_TO_SHIP
  SHIPPED
  COMPLETED
  CANCELLED
}

enum OrderItemProcessingStatus {
  NOT_STARTED_PRODUCTION
  CUTTING
  SEWING
  WRAPPING
  READY
}

model User {
  id                 String              @id() @default(cuid())
  name               String
  email              String              @unique()
  contactNumber      String?
  passwordHash       String
  emailVerified      DateTime?
  image              String?
  status             UserStatus          @default(ACTIVE)
  hourlyRate         Decimal?            @db.Decimal(10, 2)
  organizationId     String?
  roles              UserRole[]
  itemProcessingLogs ItemProcessingLog[]
  auditLogs          AuditLog[]
  sessions           Session[]
  accounts           Account[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt()

  @@map("user")
}

model Role {
  id          String           @id() @default(cuid())
  name        String           @unique()
  description String?
  users       UserRole[]
  permissions RolePermission[]
  stations    RoleStation[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt()
}

model Permission {
  id          String           @id() @default(cuid())
  action      String
  subject     String
  description String?
  roles       RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt()

  @@unique([action, subject])
}

model UserRole {
  userId     String
  roleId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  assignedAt   DateTime   @default(now())

  @@id([roleId, permissionId])
}

model Customer {
  id                   String         @id() @default(cuid())
  quickbooksCustomerId String?        @unique()
  name                 String
  contactNumber        String?
  email                String?
  type                 CustomerType
  status               CustomerStatus @default(ACTIVE)
  shippingAddressLine1 String?
  shippingAddressLine2 String?
  shippingCity         String?
  shippingState        String?
  shippingZipCode      String?
  shippingCountry      String?
  billingAddressLine1  String?
  billingAddressLine2  String?
  billingCity          String?
  billingState         String?
  billingZipCode       String?
  billingCountry       String?
  orders               Order[]
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt()
}

model Item {
  id               String      @id() @default(cuid())
  quickbooksItemId String?     @unique()
  name             String
  imageUrl         String?
  category         String?
  wholesalePrice   Decimal?    @db.Decimal(10, 2)
  retailPrice      Decimal?    @db.Decimal(10, 2)
  cost             Decimal?    @db.Decimal(10, 2)
  description      String?
  status           ItemStatus  @default(ACTIVE)
  orderItems       OrderItem[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt()
}

model Station {
  id                 String              @id() @default(cuid())
  name               String              @unique()
  barcode            String?             @unique()
  description        String?
  roles              RoleStation[]
  itemProcessingLogs ItemProcessingLog[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt()
}

model RoleStation {
  roleId     String
  stationId  String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  station    Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@id([roleId, stationId])
}

model Order {
  id                   String            @id() @default(cuid())
  quickbooksOrderId    String?           @unique()
  customerId           String
  customer             Customer          @relation(fields: [customerId], references: [id])
  salesOrderNumber     String?
  purchaseOrderNumber  String?
  contactEmail         String
  contactPhoneNumber   String?
  billingAddressLine1  String?
  billingAddressLine2  String?
  billingCity          String?
  billingState         String?
  billingZipCode       String?
  billingCountry       String?
  shippingAddressLine1 String?
  shippingAddressLine2 String?
  shippingCity         String?
  shippingState        String?
  shippingZipCode      String?
  shippingCountry      String?
  orderStatus          OrderSystemStatus @default(PENDING)
  barcode              String?           @unique()
  approvedAt           DateTime?
  readyToShipAt        DateTime?
  shippedAt            DateTime?
  notes                String?           @db.Text()
  orderItems           OrderItem[]
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt()
}

model OrderItem {
  id                    String                    @id() @default(cuid())
  orderId               String
  order                 Order                     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  itemId                String
  item                  Item                      @relation(fields: [itemId], references: [id])
  quickbooksOrderLineId String?                   @unique()
  quantity              Int
  pricePerItem          Decimal                   @db.Decimal(10, 2)
  itemStatus            OrderItemProcessingStatus @default(NOT_STARTED_PRODUCTION)
  notes                 String?                   @db.Text()
  itemProcessingLogs    ItemProcessingLog[]
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt()
}

model ItemProcessingLog {
  id                String    @id() @default(cuid())
  orderItemId       String
  orderItem         OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  stationId         String
  station           Station   @relation(fields: [stationId], references: [id])
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  startTime         DateTime
  endTime           DateTime?
  durationInSeconds Int?
  notes             String?   @db.Text()
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt()
}

model AuditLog {
  id         String   @id() @default(cuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action     String
  entityName String?
  entityId   String?
  oldValue   Json?
  newValue   Json?
  ipAddress  String?
  timestamp  DateTime @default(now())

  @@index([entityName, entityId])
  @@index([userId])
  @@index([action])
}

model Session {
  id        String   @id() @default(cuid())
  expiresAt DateTime
  token     String   @unique()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id() @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text()
  refreshToken          String?   @db.Text()
  idToken               String?   @db.Text()
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt()

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String   @id() @default(cuid())
  identifier String
  value      String   @unique()
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()

  @@map("verification")
}
