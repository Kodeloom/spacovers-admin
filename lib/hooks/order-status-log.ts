/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, OrderStatusLog } from "@prisma-app/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateOrderStatusLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(OrderStatusLog | undefined), DefaultError, Prisma.OrderStatusLogCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(OrderStatusLog | undefined), DefaultError, Prisma.OrderStatusLogCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderStatusLogCreateArgs, DefaultError, OrderStatusLog, true>('OrderStatusLog', 'POST', `${endpoint}/orderStatusLog/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderStatusLogCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderStatusLogCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, OrderStatusLog, Prisma.OrderStatusLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusLogCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, OrderStatusLog, Prisma.OrderStatusLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusLogCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OrderStatusLog, Prisma.OrderStatusLogGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyOrderStatusLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OrderStatusLogCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OrderStatusLogCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderStatusLogCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('OrderStatusLog', 'POST', `${endpoint}/orderStatusLog/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderStatusLogCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderStatusLogCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusLogCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusLogCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyOrderStatusLog<TArgs extends Prisma.OrderStatusLogFindManyArgs, TQueryFnData = Array<Prisma.OrderStatusLogGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.OrderStatusLogFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.OrderStatusLogFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderStatusLog', `${endpoint}/orderStatusLog/findMany`, args, options, fetch);
}

export function useInfiniteFindManyOrderStatusLog<TArgs extends Prisma.OrderStatusLogFindManyArgs, TQueryFnData = Array<Prisma.OrderStatusLogGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.OrderStatusLogFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.OrderStatusLogFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('OrderStatusLog', `${endpoint}/orderStatusLog/findMany`, args, options, fetch);
}

export function useFindUniqueOrderStatusLog<TArgs extends Prisma.OrderStatusLogFindUniqueArgs, TQueryFnData = Prisma.OrderStatusLogGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.OrderStatusLogFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.OrderStatusLogFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderStatusLog', `${endpoint}/orderStatusLog/findUnique`, args, options, fetch);
}

export function useFindFirstOrderStatusLog<TArgs extends Prisma.OrderStatusLogFindFirstArgs, TQueryFnData = Prisma.OrderStatusLogGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.OrderStatusLogFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.OrderStatusLogFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderStatusLog', `${endpoint}/orderStatusLog/findFirst`, args, options, fetch);
}

export function useUpdateOrderStatusLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(OrderStatusLog | undefined), DefaultError, Prisma.OrderStatusLogUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(OrderStatusLog | undefined), DefaultError, Prisma.OrderStatusLogUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderStatusLogUpdateArgs, DefaultError, OrderStatusLog, true>('OrderStatusLog', 'PUT', `${endpoint}/orderStatusLog/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderStatusLogUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderStatusLogUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, OrderStatusLog, Prisma.OrderStatusLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusLogUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, OrderStatusLog, Prisma.OrderStatusLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusLogUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OrderStatusLog, Prisma.OrderStatusLogGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyOrderStatusLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OrderStatusLogUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OrderStatusLogUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderStatusLogUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('OrderStatusLog', 'PUT', `${endpoint}/orderStatusLog/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderStatusLogUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderStatusLogUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusLogUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusLogUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertOrderStatusLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(OrderStatusLog | undefined), DefaultError, Prisma.OrderStatusLogUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(OrderStatusLog | undefined), DefaultError, Prisma.OrderStatusLogUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderStatusLogUpsertArgs, DefaultError, OrderStatusLog, true>('OrderStatusLog', 'POST', `${endpoint}/orderStatusLog/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderStatusLogUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderStatusLogUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, OrderStatusLog, Prisma.OrderStatusLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusLogUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, OrderStatusLog, Prisma.OrderStatusLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusLogUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OrderStatusLog, Prisma.OrderStatusLogGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteOrderStatusLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(OrderStatusLog | undefined), DefaultError, Prisma.OrderStatusLogDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(OrderStatusLog | undefined), DefaultError, Prisma.OrderStatusLogDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderStatusLogDeleteArgs, DefaultError, OrderStatusLog, true>('OrderStatusLog', 'DELETE', `${endpoint}/orderStatusLog/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderStatusLogDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderStatusLogDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, OrderStatusLog, Prisma.OrderStatusLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusLogDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, OrderStatusLog, Prisma.OrderStatusLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusLogDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OrderStatusLog, Prisma.OrderStatusLogGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyOrderStatusLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OrderStatusLogDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OrderStatusLogDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderStatusLogDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('OrderStatusLog', 'DELETE', `${endpoint}/orderStatusLog/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderStatusLogDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderStatusLogDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusLogDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusLogDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateOrderStatusLog<TArgs extends Prisma.OrderStatusLogAggregateArgs, TQueryFnData = Prisma.GetOrderStatusLogAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.OrderStatusLogAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.OrderStatusLogAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderStatusLog', `${endpoint}/orderStatusLog/aggregate`, args, options, fetch);
}

export function useGroupByOrderStatusLog<TArgs extends Prisma.OrderStatusLogGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.OrderStatusLogGroupByArgs['orderBy'] } : { orderBy?: Prisma.OrderStatusLogGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.OrderStatusLogGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.OrderStatusLogGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.OrderStatusLogGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.OrderStatusLogGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.OrderStatusLogGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.OrderStatusLogGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderStatusLog', `${endpoint}/orderStatusLog/groupBy`, args, options, fetch);
}

export function useCountOrderStatusLog<TArgs extends Prisma.OrderStatusLogCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.OrderStatusLogCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.OrderStatusLogCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.OrderStatusLogCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderStatusLog', `${endpoint}/orderStatusLog/count`, args, options, fetch);
}
import type { OrderSystemStatus } from '@prisma-app/client';

export function useCheckOrderStatusLog<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; orderId?: string; userId?: string; fromStatus?: OrderSystemStatus; toStatus?: OrderSystemStatus; changeReason?: string; triggeredBy?: string; notes?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('OrderStatusLog', `${endpoint}/orderStatusLog/check`, args, options, fetch);
}
