/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, BarcodeScanner } from "@prisma-app/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateBarcodeScanner(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(BarcodeScanner | undefined), DefaultError, Prisma.BarcodeScannerCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(BarcodeScanner | undefined), DefaultError, Prisma.BarcodeScannerCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BarcodeScannerCreateArgs, DefaultError, BarcodeScanner, true>('BarcodeScanner', 'POST', `${endpoint}/barcodeScanner/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BarcodeScannerCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.BarcodeScannerCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, BarcodeScanner, Prisma.BarcodeScannerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BarcodeScannerCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, BarcodeScanner, Prisma.BarcodeScannerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BarcodeScannerCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, BarcodeScanner, Prisma.BarcodeScannerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyBarcodeScanner(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BarcodeScannerCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BarcodeScannerCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BarcodeScannerCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('BarcodeScanner', 'POST', `${endpoint}/barcodeScanner/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BarcodeScannerCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.BarcodeScannerCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BarcodeScannerCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BarcodeScannerCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyBarcodeScanner<TArgs extends Prisma.BarcodeScannerFindManyArgs, TQueryFnData = Array<Prisma.BarcodeScannerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.BarcodeScannerFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.BarcodeScannerFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BarcodeScanner', `${endpoint}/barcodeScanner/findMany`, args, options, fetch);
}

export function useInfiniteFindManyBarcodeScanner<TArgs extends Prisma.BarcodeScannerFindManyArgs, TQueryFnData = Array<Prisma.BarcodeScannerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.BarcodeScannerFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.BarcodeScannerFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('BarcodeScanner', `${endpoint}/barcodeScanner/findMany`, args, options, fetch);
}

export function useFindUniqueBarcodeScanner<TArgs extends Prisma.BarcodeScannerFindUniqueArgs, TQueryFnData = Prisma.BarcodeScannerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.BarcodeScannerFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.BarcodeScannerFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BarcodeScanner', `${endpoint}/barcodeScanner/findUnique`, args, options, fetch);
}

export function useFindFirstBarcodeScanner<TArgs extends Prisma.BarcodeScannerFindFirstArgs, TQueryFnData = Prisma.BarcodeScannerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.BarcodeScannerFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.BarcodeScannerFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BarcodeScanner', `${endpoint}/barcodeScanner/findFirst`, args, options, fetch);
}

export function useUpdateBarcodeScanner(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(BarcodeScanner | undefined), DefaultError, Prisma.BarcodeScannerUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(BarcodeScanner | undefined), DefaultError, Prisma.BarcodeScannerUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BarcodeScannerUpdateArgs, DefaultError, BarcodeScanner, true>('BarcodeScanner', 'PUT', `${endpoint}/barcodeScanner/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BarcodeScannerUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.BarcodeScannerUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, BarcodeScanner, Prisma.BarcodeScannerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BarcodeScannerUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, BarcodeScanner, Prisma.BarcodeScannerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BarcodeScannerUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, BarcodeScanner, Prisma.BarcodeScannerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyBarcodeScanner(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BarcodeScannerUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BarcodeScannerUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BarcodeScannerUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('BarcodeScanner', 'PUT', `${endpoint}/barcodeScanner/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BarcodeScannerUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.BarcodeScannerUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BarcodeScannerUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BarcodeScannerUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertBarcodeScanner(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(BarcodeScanner | undefined), DefaultError, Prisma.BarcodeScannerUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(BarcodeScanner | undefined), DefaultError, Prisma.BarcodeScannerUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BarcodeScannerUpsertArgs, DefaultError, BarcodeScanner, true>('BarcodeScanner', 'POST', `${endpoint}/barcodeScanner/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BarcodeScannerUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.BarcodeScannerUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, BarcodeScanner, Prisma.BarcodeScannerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BarcodeScannerUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, BarcodeScanner, Prisma.BarcodeScannerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BarcodeScannerUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, BarcodeScanner, Prisma.BarcodeScannerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteBarcodeScanner(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(BarcodeScanner | undefined), DefaultError, Prisma.BarcodeScannerDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(BarcodeScanner | undefined), DefaultError, Prisma.BarcodeScannerDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BarcodeScannerDeleteArgs, DefaultError, BarcodeScanner, true>('BarcodeScanner', 'DELETE', `${endpoint}/barcodeScanner/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BarcodeScannerDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.BarcodeScannerDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, BarcodeScanner, Prisma.BarcodeScannerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BarcodeScannerDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, BarcodeScanner, Prisma.BarcodeScannerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.BarcodeScannerDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, BarcodeScanner, Prisma.BarcodeScannerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyBarcodeScanner(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BarcodeScannerDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.BarcodeScannerDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.BarcodeScannerDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('BarcodeScanner', 'DELETE', `${endpoint}/barcodeScanner/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.BarcodeScannerDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.BarcodeScannerDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BarcodeScannerDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.BarcodeScannerDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateBarcodeScanner<TArgs extends Prisma.BarcodeScannerAggregateArgs, TQueryFnData = Prisma.GetBarcodeScannerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.BarcodeScannerAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.BarcodeScannerAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BarcodeScanner', `${endpoint}/barcodeScanner/aggregate`, args, options, fetch);
}

export function useGroupByBarcodeScanner<TArgs extends Prisma.BarcodeScannerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.BarcodeScannerGroupByArgs['orderBy'] } : { orderBy?: Prisma.BarcodeScannerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.BarcodeScannerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.BarcodeScannerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.BarcodeScannerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.BarcodeScannerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.BarcodeScannerGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.BarcodeScannerGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BarcodeScanner', `${endpoint}/barcodeScanner/groupBy`, args, options, fetch);
}

export function useCountBarcodeScanner<TArgs extends Prisma.BarcodeScannerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.BarcodeScannerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.BarcodeScannerCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.BarcodeScannerCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('BarcodeScanner', `${endpoint}/barcodeScanner/count`, args, options, fetch);
}

export function useCheckBarcodeScanner<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; prefix?: string; stationId?: string; userId?: string; model?: string; serialNumber?: string; isActive?: boolean }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('BarcodeScanner', `${endpoint}/barcodeScanner/check`, args, options, fetch);
}
