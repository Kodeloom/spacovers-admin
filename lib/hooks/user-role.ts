/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, UserRole } from "@prisma-app/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateUserRole(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(UserRole | undefined), DefaultError, Prisma.UserRoleCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(UserRole | undefined), DefaultError, Prisma.UserRoleCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserRoleCreateArgs, DefaultError, UserRole, true>('UserRole', 'POST', `${endpoint}/userRole/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserRoleCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserRoleCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, UserRole, Prisma.UserRoleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserRoleCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, UserRole, Prisma.UserRoleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserRoleCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, UserRole, Prisma.UserRoleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyUserRole(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.UserRoleCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.UserRoleCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserRoleCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('UserRole', 'POST', `${endpoint}/userRole/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserRoleCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserRoleCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.UserRoleCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.UserRoleCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyUserRole<TArgs extends Prisma.UserRoleFindManyArgs, TQueryFnData = Array<Prisma.UserRoleGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.UserRoleFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.UserRoleFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserRole', `${endpoint}/userRole/findMany`, args, options, fetch);
}

export function useInfiniteFindManyUserRole<TArgs extends Prisma.UserRoleFindManyArgs, TQueryFnData = Array<Prisma.UserRoleGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.UserRoleFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.UserRoleFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('UserRole', `${endpoint}/userRole/findMany`, args, options, fetch);
}

export function useFindUniqueUserRole<TArgs extends Prisma.UserRoleFindUniqueArgs, TQueryFnData = Prisma.UserRoleGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.UserRoleFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.UserRoleFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserRole', `${endpoint}/userRole/findUnique`, args, options, fetch);
}

export function useFindFirstUserRole<TArgs extends Prisma.UserRoleFindFirstArgs, TQueryFnData = Prisma.UserRoleGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.UserRoleFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.UserRoleFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserRole', `${endpoint}/userRole/findFirst`, args, options, fetch);
}

export function useUpdateUserRole(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(UserRole | undefined), DefaultError, Prisma.UserRoleUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(UserRole | undefined), DefaultError, Prisma.UserRoleUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserRoleUpdateArgs, DefaultError, UserRole, true>('UserRole', 'PUT', `${endpoint}/userRole/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserRoleUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserRoleUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, UserRole, Prisma.UserRoleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserRoleUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, UserRole, Prisma.UserRoleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserRoleUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, UserRole, Prisma.UserRoleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyUserRole(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.UserRoleUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.UserRoleUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserRoleUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('UserRole', 'PUT', `${endpoint}/userRole/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserRoleUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserRoleUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.UserRoleUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.UserRoleUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertUserRole(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(UserRole | undefined), DefaultError, Prisma.UserRoleUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(UserRole | undefined), DefaultError, Prisma.UserRoleUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserRoleUpsertArgs, DefaultError, UserRole, true>('UserRole', 'POST', `${endpoint}/userRole/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserRoleUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserRoleUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, UserRole, Prisma.UserRoleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserRoleUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, UserRole, Prisma.UserRoleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserRoleUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, UserRole, Prisma.UserRoleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteUserRole(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(UserRole | undefined), DefaultError, Prisma.UserRoleDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(UserRole | undefined), DefaultError, Prisma.UserRoleDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserRoleDeleteArgs, DefaultError, UserRole, true>('UserRole', 'DELETE', `${endpoint}/userRole/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserRoleDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserRoleDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, UserRole, Prisma.UserRoleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserRoleDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, UserRole, Prisma.UserRoleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.UserRoleDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, UserRole, Prisma.UserRoleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyUserRole(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.UserRoleDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.UserRoleDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.UserRoleDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('UserRole', 'DELETE', `${endpoint}/userRole/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.UserRoleDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.UserRoleDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.UserRoleDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.UserRoleDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateUserRole<TArgs extends Prisma.UserRoleAggregateArgs, TQueryFnData = Prisma.GetUserRoleAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.UserRoleAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.UserRoleAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserRole', `${endpoint}/userRole/aggregate`, args, options, fetch);
}

export function useGroupByUserRole<TArgs extends Prisma.UserRoleGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.UserRoleGroupByArgs['orderBy'] } : { orderBy?: Prisma.UserRoleGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.UserRoleGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.UserRoleGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.UserRoleGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.UserRoleGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.UserRoleGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.UserRoleGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserRole', `${endpoint}/userRole/groupBy`, args, options, fetch);
}

export function useCountUserRole<TArgs extends Prisma.UserRoleCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.UserRoleCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.UserRoleCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.UserRoleCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('UserRole', `${endpoint}/userRole/count`, args, options, fetch);
}

export function useCheckUserRole<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { userId?: string; roleId?: string; assignedBy?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('UserRole', `${endpoint}/userRole/check`, args, options, fetch);
}
