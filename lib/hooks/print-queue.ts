/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, PrintQueue } from "@prisma-app/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreatePrintQueue(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(PrintQueue | undefined), DefaultError, Prisma.PrintQueueCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(PrintQueue | undefined), DefaultError, Prisma.PrintQueueCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PrintQueueCreateArgs, DefaultError, PrintQueue, true>('PrintQueue', 'POST', `${endpoint}/printQueue/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PrintQueueCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PrintQueueCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, PrintQueue, Prisma.PrintQueueGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PrintQueueCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, PrintQueue, Prisma.PrintQueueGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PrintQueueCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PrintQueue, Prisma.PrintQueueGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyPrintQueue(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PrintQueueCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PrintQueueCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PrintQueueCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('PrintQueue', 'POST', `${endpoint}/printQueue/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PrintQueueCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PrintQueueCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PrintQueueCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PrintQueueCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyPrintQueue<TArgs extends Prisma.PrintQueueFindManyArgs, TQueryFnData = Array<Prisma.PrintQueueGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.PrintQueueFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.PrintQueueFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PrintQueue', `${endpoint}/printQueue/findMany`, args, options, fetch);
}

export function useInfiniteFindManyPrintQueue<TArgs extends Prisma.PrintQueueFindManyArgs, TQueryFnData = Array<Prisma.PrintQueueGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.PrintQueueFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.PrintQueueFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('PrintQueue', `${endpoint}/printQueue/findMany`, args, options, fetch);
}

export function useFindUniquePrintQueue<TArgs extends Prisma.PrintQueueFindUniqueArgs, TQueryFnData = Prisma.PrintQueueGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.PrintQueueFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.PrintQueueFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PrintQueue', `${endpoint}/printQueue/findUnique`, args, options, fetch);
}

export function useFindFirstPrintQueue<TArgs extends Prisma.PrintQueueFindFirstArgs, TQueryFnData = Prisma.PrintQueueGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.PrintQueueFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.PrintQueueFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PrintQueue', `${endpoint}/printQueue/findFirst`, args, options, fetch);
}

export function useUpdatePrintQueue(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(PrintQueue | undefined), DefaultError, Prisma.PrintQueueUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(PrintQueue | undefined), DefaultError, Prisma.PrintQueueUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PrintQueueUpdateArgs, DefaultError, PrintQueue, true>('PrintQueue', 'PUT', `${endpoint}/printQueue/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PrintQueueUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.PrintQueueUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, PrintQueue, Prisma.PrintQueueGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PrintQueueUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, PrintQueue, Prisma.PrintQueueGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PrintQueueUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PrintQueue, Prisma.PrintQueueGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyPrintQueue(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PrintQueueUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PrintQueueUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PrintQueueUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('PrintQueue', 'PUT', `${endpoint}/printQueue/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PrintQueueUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PrintQueueUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PrintQueueUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PrintQueueUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertPrintQueue(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(PrintQueue | undefined), DefaultError, Prisma.PrintQueueUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(PrintQueue | undefined), DefaultError, Prisma.PrintQueueUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PrintQueueUpsertArgs, DefaultError, PrintQueue, true>('PrintQueue', 'POST', `${endpoint}/printQueue/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PrintQueueUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.PrintQueueUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, PrintQueue, Prisma.PrintQueueGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PrintQueueUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, PrintQueue, Prisma.PrintQueueGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PrintQueueUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PrintQueue, Prisma.PrintQueueGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeletePrintQueue(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(PrintQueue | undefined), DefaultError, Prisma.PrintQueueDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(PrintQueue | undefined), DefaultError, Prisma.PrintQueueDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PrintQueueDeleteArgs, DefaultError, PrintQueue, true>('PrintQueue', 'DELETE', `${endpoint}/printQueue/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PrintQueueDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.PrintQueueDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, PrintQueue, Prisma.PrintQueueGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PrintQueueDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, PrintQueue, Prisma.PrintQueueGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.PrintQueueDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, PrintQueue, Prisma.PrintQueueGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyPrintQueue(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PrintQueueDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.PrintQueueDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.PrintQueueDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('PrintQueue', 'DELETE', `${endpoint}/printQueue/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.PrintQueueDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.PrintQueueDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PrintQueueDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.PrintQueueDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregatePrintQueue<TArgs extends Prisma.PrintQueueAggregateArgs, TQueryFnData = Prisma.GetPrintQueueAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.PrintQueueAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.PrintQueueAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PrintQueue', `${endpoint}/printQueue/aggregate`, args, options, fetch);
}

export function useGroupByPrintQueue<TArgs extends Prisma.PrintQueueGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.PrintQueueGroupByArgs['orderBy'] } : { orderBy?: Prisma.PrintQueueGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.PrintQueueGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.PrintQueueGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.PrintQueueGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.PrintQueueGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PrintQueueGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.PrintQueueGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PrintQueue', `${endpoint}/printQueue/groupBy`, args, options, fetch);
}

export function useCountPrintQueue<TArgs extends Prisma.PrintQueueCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.PrintQueueCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.PrintQueueCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.PrintQueueCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('PrintQueue', `${endpoint}/printQueue/count`, args, options, fetch);
}

export function useCheckPrintQueue<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; orderItemId?: string; isPrinted?: boolean; addedBy?: string; printedBy?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('PrintQueue', `${endpoint}/printQueue/check`, args, options, fetch);
}
