/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, Estimate } from "@prisma-app/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateEstimate(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Estimate | undefined), DefaultError, Prisma.EstimateCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(Estimate | undefined), DefaultError, Prisma.EstimateCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EstimateCreateArgs, DefaultError, Estimate, true>('Estimate', 'POST', `${endpoint}/estimate/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EstimateCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.EstimateCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Estimate, Prisma.EstimateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EstimateCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Estimate, Prisma.EstimateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EstimateCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Estimate, Prisma.EstimateGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyEstimate(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EstimateCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EstimateCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EstimateCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('Estimate', 'POST', `${endpoint}/estimate/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EstimateCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.EstimateCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EstimateCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EstimateCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyEstimate<TArgs extends Prisma.EstimateFindManyArgs, TQueryFnData = Array<Prisma.EstimateGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EstimateFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EstimateFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Estimate', `${endpoint}/estimate/findMany`, args, options, fetch);
}

export function useInfiniteFindManyEstimate<TArgs extends Prisma.EstimateFindManyArgs, TQueryFnData = Array<Prisma.EstimateGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EstimateFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EstimateFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('Estimate', `${endpoint}/estimate/findMany`, args, options, fetch);
}

export function useFindUniqueEstimate<TArgs extends Prisma.EstimateFindUniqueArgs, TQueryFnData = Prisma.EstimateGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EstimateFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EstimateFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Estimate', `${endpoint}/estimate/findUnique`, args, options, fetch);
}

export function useFindFirstEstimate<TArgs extends Prisma.EstimateFindFirstArgs, TQueryFnData = Prisma.EstimateGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EstimateFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EstimateFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Estimate', `${endpoint}/estimate/findFirst`, args, options, fetch);
}

export function useUpdateEstimate(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Estimate | undefined), DefaultError, Prisma.EstimateUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(Estimate | undefined), DefaultError, Prisma.EstimateUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EstimateUpdateArgs, DefaultError, Estimate, true>('Estimate', 'PUT', `${endpoint}/estimate/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EstimateUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.EstimateUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Estimate, Prisma.EstimateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EstimateUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Estimate, Prisma.EstimateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EstimateUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Estimate, Prisma.EstimateGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyEstimate(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EstimateUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EstimateUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EstimateUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('Estimate', 'PUT', `${endpoint}/estimate/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EstimateUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.EstimateUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EstimateUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EstimateUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertEstimate(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Estimate | undefined), DefaultError, Prisma.EstimateUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(Estimate | undefined), DefaultError, Prisma.EstimateUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EstimateUpsertArgs, DefaultError, Estimate, true>('Estimate', 'POST', `${endpoint}/estimate/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EstimateUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.EstimateUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Estimate, Prisma.EstimateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EstimateUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Estimate, Prisma.EstimateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EstimateUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Estimate, Prisma.EstimateGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteEstimate(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Estimate | undefined), DefaultError, Prisma.EstimateDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(Estimate | undefined), DefaultError, Prisma.EstimateDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EstimateDeleteArgs, DefaultError, Estimate, true>('Estimate', 'DELETE', `${endpoint}/estimate/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EstimateDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.EstimateDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Estimate, Prisma.EstimateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EstimateDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Estimate, Prisma.EstimateGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EstimateDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Estimate, Prisma.EstimateGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyEstimate(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EstimateDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EstimateDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EstimateDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('Estimate', 'DELETE', `${endpoint}/estimate/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EstimateDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.EstimateDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EstimateDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EstimateDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateEstimate<TArgs extends Prisma.EstimateAggregateArgs, TQueryFnData = Prisma.GetEstimateAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EstimateAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EstimateAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Estimate', `${endpoint}/estimate/aggregate`, args, options, fetch);
}

export function useGroupByEstimate<TArgs extends Prisma.EstimateGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.EstimateGroupByArgs['orderBy'] } : { orderBy?: Prisma.EstimateGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.EstimateGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.EstimateGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.EstimateGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.EstimateGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.EstimateGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.EstimateGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Estimate', `${endpoint}/estimate/groupBy`, args, options, fetch);
}

export function useCountEstimate<TArgs extends Prisma.EstimateCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.EstimateCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EstimateCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EstimateCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Estimate', `${endpoint}/estimate/count`, args, options, fetch);
}

export function useCheckEstimate<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; quickbooksEstimateId?: string; customerId?: string; estimateNumber?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('Estimate', `${endpoint}/estimate/check`, args, options, fetch);
}
