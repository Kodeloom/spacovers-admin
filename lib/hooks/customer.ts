/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, Customer } from "../../shared/generated/prisma";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateCustomer(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Customer | undefined), DefaultError, Prisma.CustomerCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(Customer | undefined), DefaultError, Prisma.CustomerCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CustomerCreateArgs, DefaultError, Customer, true>('Customer', 'POST', `${endpoint}/customer/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CustomerCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CustomerCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Customer, Prisma.CustomerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CustomerCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Customer, Prisma.CustomerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CustomerCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Customer, Prisma.CustomerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyCustomer(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CustomerCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CustomerCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CustomerCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('Customer', 'POST', `${endpoint}/customer/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CustomerCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CustomerCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CustomerCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CustomerCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyCustomer<TArgs extends Prisma.CustomerFindManyArgs, TQueryFnData = Array<Prisma.CustomerGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.CustomerFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.CustomerFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Customer', `${endpoint}/customer/findMany`, args, options, fetch);
}

export function useInfiniteFindManyCustomer<TArgs extends Prisma.CustomerFindManyArgs, TQueryFnData = Array<Prisma.CustomerGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.CustomerFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.CustomerFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('Customer', `${endpoint}/customer/findMany`, args, options, fetch);
}

export function useFindUniqueCustomer<TArgs extends Prisma.CustomerFindUniqueArgs, TQueryFnData = Prisma.CustomerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.CustomerFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.CustomerFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Customer', `${endpoint}/customer/findUnique`, args, options, fetch);
}

export function useFindFirstCustomer<TArgs extends Prisma.CustomerFindFirstArgs, TQueryFnData = Prisma.CustomerGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.CustomerFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.CustomerFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Customer', `${endpoint}/customer/findFirst`, args, options, fetch);
}

export function useUpdateCustomer(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Customer | undefined), DefaultError, Prisma.CustomerUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(Customer | undefined), DefaultError, Prisma.CustomerUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CustomerUpdateArgs, DefaultError, Customer, true>('Customer', 'PUT', `${endpoint}/customer/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CustomerUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CustomerUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Customer, Prisma.CustomerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CustomerUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Customer, Prisma.CustomerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CustomerUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Customer, Prisma.CustomerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyCustomer(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CustomerUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CustomerUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CustomerUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('Customer', 'PUT', `${endpoint}/customer/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CustomerUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CustomerUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CustomerUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CustomerUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertCustomer(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Customer | undefined), DefaultError, Prisma.CustomerUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(Customer | undefined), DefaultError, Prisma.CustomerUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CustomerUpsertArgs, DefaultError, Customer, true>('Customer', 'POST', `${endpoint}/customer/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CustomerUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.CustomerUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Customer, Prisma.CustomerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CustomerUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Customer, Prisma.CustomerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CustomerUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Customer, Prisma.CustomerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteCustomer(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Customer | undefined), DefaultError, Prisma.CustomerDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(Customer | undefined), DefaultError, Prisma.CustomerDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CustomerDeleteArgs, DefaultError, Customer, true>('Customer', 'DELETE', `${endpoint}/customer/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CustomerDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.CustomerDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Customer, Prisma.CustomerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CustomerDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Customer, Prisma.CustomerGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CustomerDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Customer, Prisma.CustomerGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyCustomer(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CustomerDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CustomerDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CustomerDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('Customer', 'DELETE', `${endpoint}/customer/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CustomerDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CustomerDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CustomerDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CustomerDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCustomer<TArgs extends Prisma.CustomerAggregateArgs, TQueryFnData = Prisma.GetCustomerAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.CustomerAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.CustomerAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Customer', `${endpoint}/customer/aggregate`, args, options, fetch);
}

export function useGroupByCustomer<TArgs extends Prisma.CustomerGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CustomerGroupByArgs['orderBy'] } : { orderBy?: Prisma.CustomerGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CustomerGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CustomerGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CustomerGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CustomerGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CustomerGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CustomerGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Customer', `${endpoint}/customer/groupBy`, args, options, fetch);
}

export function useCountCustomer<TArgs extends Prisma.CustomerCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CustomerCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.CustomerCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.CustomerCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Customer', `${endpoint}/customer/count`, args, options, fetch);
}
import type { CustomerType, CustomerStatus } from '../../shared/generated/prisma';

export function useCheckCustomer<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; quickbooksCustomerId?: string; name?: string; contactNumber?: string; email?: string; type?: CustomerType; status?: CustomerStatus; shippingAddressLine1?: string; shippingAddressLine2?: string; shippingCity?: string; shippingState?: string; shippingZipCode?: string; shippingCountry?: string; billingAddressLine1?: string; billingAddressLine2?: string; billingCity?: string; billingState?: string; billingZipCode?: string; billingCountry?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('Customer', `${endpoint}/customer/check`, args, options, fetch);
}
