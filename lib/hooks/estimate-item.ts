/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, EstimateItem } from "@prisma-app/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateEstimateItem(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(EstimateItem | undefined), DefaultError, Prisma.EstimateItemCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(EstimateItem | undefined), DefaultError, Prisma.EstimateItemCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EstimateItemCreateArgs, DefaultError, EstimateItem, true>('EstimateItem', 'POST', `${endpoint}/estimateItem/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EstimateItemCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.EstimateItemCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, EstimateItem, Prisma.EstimateItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EstimateItemCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, EstimateItem, Prisma.EstimateItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EstimateItemCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, EstimateItem, Prisma.EstimateItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyEstimateItem(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EstimateItemCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EstimateItemCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EstimateItemCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('EstimateItem', 'POST', `${endpoint}/estimateItem/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EstimateItemCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.EstimateItemCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EstimateItemCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EstimateItemCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyEstimateItem<TArgs extends Prisma.EstimateItemFindManyArgs, TQueryFnData = Array<Prisma.EstimateItemGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EstimateItemFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EstimateItemFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('EstimateItem', `${endpoint}/estimateItem/findMany`, args, options, fetch);
}

export function useInfiniteFindManyEstimateItem<TArgs extends Prisma.EstimateItemFindManyArgs, TQueryFnData = Array<Prisma.EstimateItemGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EstimateItemFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EstimateItemFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('EstimateItem', `${endpoint}/estimateItem/findMany`, args, options, fetch);
}

export function useFindUniqueEstimateItem<TArgs extends Prisma.EstimateItemFindUniqueArgs, TQueryFnData = Prisma.EstimateItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EstimateItemFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EstimateItemFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('EstimateItem', `${endpoint}/estimateItem/findUnique`, args, options, fetch);
}

export function useFindFirstEstimateItem<TArgs extends Prisma.EstimateItemFindFirstArgs, TQueryFnData = Prisma.EstimateItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EstimateItemFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EstimateItemFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('EstimateItem', `${endpoint}/estimateItem/findFirst`, args, options, fetch);
}

export function useUpdateEstimateItem(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(EstimateItem | undefined), DefaultError, Prisma.EstimateItemUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(EstimateItem | undefined), DefaultError, Prisma.EstimateItemUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EstimateItemUpdateArgs, DefaultError, EstimateItem, true>('EstimateItem', 'PUT', `${endpoint}/estimateItem/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EstimateItemUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.EstimateItemUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, EstimateItem, Prisma.EstimateItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EstimateItemUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, EstimateItem, Prisma.EstimateItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EstimateItemUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, EstimateItem, Prisma.EstimateItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyEstimateItem(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EstimateItemUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EstimateItemUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EstimateItemUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('EstimateItem', 'PUT', `${endpoint}/estimateItem/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EstimateItemUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.EstimateItemUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EstimateItemUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EstimateItemUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertEstimateItem(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(EstimateItem | undefined), DefaultError, Prisma.EstimateItemUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(EstimateItem | undefined), DefaultError, Prisma.EstimateItemUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EstimateItemUpsertArgs, DefaultError, EstimateItem, true>('EstimateItem', 'POST', `${endpoint}/estimateItem/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EstimateItemUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.EstimateItemUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, EstimateItem, Prisma.EstimateItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EstimateItemUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, EstimateItem, Prisma.EstimateItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EstimateItemUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, EstimateItem, Prisma.EstimateItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteEstimateItem(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(EstimateItem | undefined), DefaultError, Prisma.EstimateItemDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(EstimateItem | undefined), DefaultError, Prisma.EstimateItemDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EstimateItemDeleteArgs, DefaultError, EstimateItem, true>('EstimateItem', 'DELETE', `${endpoint}/estimateItem/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EstimateItemDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.EstimateItemDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, EstimateItem, Prisma.EstimateItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EstimateItemDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, EstimateItem, Prisma.EstimateItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EstimateItemDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, EstimateItem, Prisma.EstimateItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyEstimateItem(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EstimateItemDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EstimateItemDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EstimateItemDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('EstimateItem', 'DELETE', `${endpoint}/estimateItem/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EstimateItemDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.EstimateItemDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EstimateItemDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EstimateItemDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateEstimateItem<TArgs extends Prisma.EstimateItemAggregateArgs, TQueryFnData = Prisma.GetEstimateItemAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EstimateItemAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EstimateItemAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('EstimateItem', `${endpoint}/estimateItem/aggregate`, args, options, fetch);
}

export function useGroupByEstimateItem<TArgs extends Prisma.EstimateItemGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.EstimateItemGroupByArgs['orderBy'] } : { orderBy?: Prisma.EstimateItemGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.EstimateItemGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.EstimateItemGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.EstimateItemGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.EstimateItemGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.EstimateItemGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.EstimateItemGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('EstimateItem', `${endpoint}/estimateItem/groupBy`, args, options, fetch);
}

export function useCountEstimateItem<TArgs extends Prisma.EstimateItemCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.EstimateItemCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EstimateItemCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EstimateItemCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('EstimateItem', `${endpoint}/estimateItem/count`, args, options, fetch);
}

export function useCheckEstimateItem<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; estimateId?: string; itemId?: string; quickbooksEstimateLineId?: string; lineDescription?: string; quantity?: number }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('EstimateItem', `${endpoint}/estimateItem/check`, args, options, fetch);
}
