/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, Verification } from "@prisma-app/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateVerification(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Verification | undefined), DefaultError, Prisma.VerificationCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(Verification | undefined), DefaultError, Prisma.VerificationCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.VerificationCreateArgs, DefaultError, Verification, true>('Verification', 'POST', `${endpoint}/verification/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.VerificationCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.VerificationCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Verification, Prisma.VerificationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.VerificationCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Verification, Prisma.VerificationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.VerificationCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Verification, Prisma.VerificationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyVerification(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.VerificationCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.VerificationCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.VerificationCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('Verification', 'POST', `${endpoint}/verification/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.VerificationCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.VerificationCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.VerificationCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.VerificationCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyVerification<TArgs extends Prisma.VerificationFindManyArgs, TQueryFnData = Array<Prisma.VerificationGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.VerificationFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.VerificationFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Verification', `${endpoint}/verification/findMany`, args, options, fetch);
}

export function useInfiniteFindManyVerification<TArgs extends Prisma.VerificationFindManyArgs, TQueryFnData = Array<Prisma.VerificationGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.VerificationFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.VerificationFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('Verification', `${endpoint}/verification/findMany`, args, options, fetch);
}

export function useFindUniqueVerification<TArgs extends Prisma.VerificationFindUniqueArgs, TQueryFnData = Prisma.VerificationGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.VerificationFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.VerificationFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Verification', `${endpoint}/verification/findUnique`, args, options, fetch);
}

export function useFindFirstVerification<TArgs extends Prisma.VerificationFindFirstArgs, TQueryFnData = Prisma.VerificationGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.VerificationFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.VerificationFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Verification', `${endpoint}/verification/findFirst`, args, options, fetch);
}

export function useUpdateVerification(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Verification | undefined), DefaultError, Prisma.VerificationUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(Verification | undefined), DefaultError, Prisma.VerificationUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.VerificationUpdateArgs, DefaultError, Verification, true>('Verification', 'PUT', `${endpoint}/verification/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.VerificationUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.VerificationUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Verification, Prisma.VerificationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.VerificationUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Verification, Prisma.VerificationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.VerificationUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Verification, Prisma.VerificationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyVerification(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.VerificationUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.VerificationUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.VerificationUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('Verification', 'PUT', `${endpoint}/verification/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.VerificationUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.VerificationUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.VerificationUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.VerificationUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertVerification(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Verification | undefined), DefaultError, Prisma.VerificationUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(Verification | undefined), DefaultError, Prisma.VerificationUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.VerificationUpsertArgs, DefaultError, Verification, true>('Verification', 'POST', `${endpoint}/verification/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.VerificationUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.VerificationUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Verification, Prisma.VerificationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.VerificationUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Verification, Prisma.VerificationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.VerificationUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Verification, Prisma.VerificationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteVerification(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Verification | undefined), DefaultError, Prisma.VerificationDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(Verification | undefined), DefaultError, Prisma.VerificationDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.VerificationDeleteArgs, DefaultError, Verification, true>('Verification', 'DELETE', `${endpoint}/verification/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.VerificationDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.VerificationDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Verification, Prisma.VerificationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.VerificationDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Verification, Prisma.VerificationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.VerificationDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Verification, Prisma.VerificationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyVerification(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.VerificationDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.VerificationDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.VerificationDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('Verification', 'DELETE', `${endpoint}/verification/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.VerificationDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.VerificationDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.VerificationDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.VerificationDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateVerification<TArgs extends Prisma.VerificationAggregateArgs, TQueryFnData = Prisma.GetVerificationAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.VerificationAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.VerificationAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Verification', `${endpoint}/verification/aggregate`, args, options, fetch);
}

export function useGroupByVerification<TArgs extends Prisma.VerificationGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.VerificationGroupByArgs['orderBy'] } : { orderBy?: Prisma.VerificationGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.VerificationGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.VerificationGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.VerificationGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.VerificationGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.VerificationGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.VerificationGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Verification', `${endpoint}/verification/groupBy`, args, options, fetch);
}

export function useCountVerification<TArgs extends Prisma.VerificationCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.VerificationCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.VerificationCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.VerificationCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Verification', `${endpoint}/verification/count`, args, options, fetch);
}

export function useCheckVerification<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; identifier?: string; value?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('Verification', `${endpoint}/verification/check`, args, options, fetch);
}
