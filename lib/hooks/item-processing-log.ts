/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ItemProcessingLog } from "../../shared/generated/prisma";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateItemProcessingLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(ItemProcessingLog | undefined), DefaultError, Prisma.ItemProcessingLogCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(ItemProcessingLog | undefined), DefaultError, Prisma.ItemProcessingLogCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ItemProcessingLogCreateArgs, DefaultError, ItemProcessingLog, true>('ItemProcessingLog', 'POST', `${endpoint}/itemProcessingLog/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ItemProcessingLogCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ItemProcessingLogCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, ItemProcessingLog, Prisma.ItemProcessingLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ItemProcessingLogCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, ItemProcessingLog, Prisma.ItemProcessingLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ItemProcessingLogCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ItemProcessingLog, Prisma.ItemProcessingLogGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyItemProcessingLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ItemProcessingLogCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ItemProcessingLogCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ItemProcessingLogCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ItemProcessingLog', 'POST', `${endpoint}/itemProcessingLog/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ItemProcessingLogCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ItemProcessingLogCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ItemProcessingLogCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ItemProcessingLogCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyItemProcessingLog<TArgs extends Prisma.ItemProcessingLogFindManyArgs, TQueryFnData = Array<Prisma.ItemProcessingLogGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ItemProcessingLogFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ItemProcessingLogFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ItemProcessingLog', `${endpoint}/itemProcessingLog/findMany`, args, options, fetch);
}

export function useInfiniteFindManyItemProcessingLog<TArgs extends Prisma.ItemProcessingLogFindManyArgs, TQueryFnData = Array<Prisma.ItemProcessingLogGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ItemProcessingLogFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ItemProcessingLogFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ItemProcessingLog', `${endpoint}/itemProcessingLog/findMany`, args, options, fetch);
}

export function useFindUniqueItemProcessingLog<TArgs extends Prisma.ItemProcessingLogFindUniqueArgs, TQueryFnData = Prisma.ItemProcessingLogGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ItemProcessingLogFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ItemProcessingLogFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ItemProcessingLog', `${endpoint}/itemProcessingLog/findUnique`, args, options, fetch);
}

export function useFindFirstItemProcessingLog<TArgs extends Prisma.ItemProcessingLogFindFirstArgs, TQueryFnData = Prisma.ItemProcessingLogGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ItemProcessingLogFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ItemProcessingLogFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ItemProcessingLog', `${endpoint}/itemProcessingLog/findFirst`, args, options, fetch);
}

export function useUpdateItemProcessingLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(ItemProcessingLog | undefined), DefaultError, Prisma.ItemProcessingLogUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(ItemProcessingLog | undefined), DefaultError, Prisma.ItemProcessingLogUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ItemProcessingLogUpdateArgs, DefaultError, ItemProcessingLog, true>('ItemProcessingLog', 'PUT', `${endpoint}/itemProcessingLog/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ItemProcessingLogUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ItemProcessingLogUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, ItemProcessingLog, Prisma.ItemProcessingLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ItemProcessingLogUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, ItemProcessingLog, Prisma.ItemProcessingLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ItemProcessingLogUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ItemProcessingLog, Prisma.ItemProcessingLogGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyItemProcessingLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ItemProcessingLogUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ItemProcessingLogUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ItemProcessingLogUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ItemProcessingLog', 'PUT', `${endpoint}/itemProcessingLog/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ItemProcessingLogUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ItemProcessingLogUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ItemProcessingLogUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ItemProcessingLogUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertItemProcessingLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(ItemProcessingLog | undefined), DefaultError, Prisma.ItemProcessingLogUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(ItemProcessingLog | undefined), DefaultError, Prisma.ItemProcessingLogUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ItemProcessingLogUpsertArgs, DefaultError, ItemProcessingLog, true>('ItemProcessingLog', 'POST', `${endpoint}/itemProcessingLog/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ItemProcessingLogUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ItemProcessingLogUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, ItemProcessingLog, Prisma.ItemProcessingLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ItemProcessingLogUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, ItemProcessingLog, Prisma.ItemProcessingLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ItemProcessingLogUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ItemProcessingLog, Prisma.ItemProcessingLogGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteItemProcessingLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(ItemProcessingLog | undefined), DefaultError, Prisma.ItemProcessingLogDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(ItemProcessingLog | undefined), DefaultError, Prisma.ItemProcessingLogDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ItemProcessingLogDeleteArgs, DefaultError, ItemProcessingLog, true>('ItemProcessingLog', 'DELETE', `${endpoint}/itemProcessingLog/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ItemProcessingLogDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ItemProcessingLogDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, ItemProcessingLog, Prisma.ItemProcessingLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ItemProcessingLogDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, ItemProcessingLog, Prisma.ItemProcessingLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ItemProcessingLogDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ItemProcessingLog, Prisma.ItemProcessingLogGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyItemProcessingLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ItemProcessingLogDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ItemProcessingLogDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ItemProcessingLogDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ItemProcessingLog', 'DELETE', `${endpoint}/itemProcessingLog/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ItemProcessingLogDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ItemProcessingLogDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ItemProcessingLogDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ItemProcessingLogDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateItemProcessingLog<TArgs extends Prisma.ItemProcessingLogAggregateArgs, TQueryFnData = Prisma.GetItemProcessingLogAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ItemProcessingLogAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ItemProcessingLogAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ItemProcessingLog', `${endpoint}/itemProcessingLog/aggregate`, args, options, fetch);
}

export function useGroupByItemProcessingLog<TArgs extends Prisma.ItemProcessingLogGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ItemProcessingLogGroupByArgs['orderBy'] } : { orderBy?: Prisma.ItemProcessingLogGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ItemProcessingLogGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ItemProcessingLogGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ItemProcessingLogGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ItemProcessingLogGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ItemProcessingLogGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ItemProcessingLogGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ItemProcessingLog', `${endpoint}/itemProcessingLog/groupBy`, args, options, fetch);
}

export function useCountItemProcessingLog<TArgs extends Prisma.ItemProcessingLogCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ItemProcessingLogCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ItemProcessingLogCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ItemProcessingLogCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ItemProcessingLog', `${endpoint}/itemProcessingLog/count`, args, options, fetch);
}

export function useCheckItemProcessingLog<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; orderItemId?: string; stationId?: string; userId?: string; durationInSeconds?: number; notes?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ItemProcessingLog', `${endpoint}/itemProcessingLog/check`, args, options, fetch);
}
