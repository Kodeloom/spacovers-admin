/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, RoleStation } from "@prisma-app/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateRoleStation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(RoleStation | undefined), DefaultError, Prisma.RoleStationCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(RoleStation | undefined), DefaultError, Prisma.RoleStationCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoleStationCreateArgs, DefaultError, RoleStation, true>('RoleStation', 'POST', `${endpoint}/roleStation/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoleStationCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoleStationCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, RoleStation, Prisma.RoleStationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RoleStationCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, RoleStation, Prisma.RoleStationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RoleStationCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RoleStation, Prisma.RoleStationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyRoleStation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RoleStationCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RoleStationCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoleStationCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('RoleStation', 'POST', `${endpoint}/roleStation/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoleStationCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoleStationCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RoleStationCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RoleStationCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyRoleStation<TArgs extends Prisma.RoleStationFindManyArgs, TQueryFnData = Array<Prisma.RoleStationGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.RoleStationFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.RoleStationFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RoleStation', `${endpoint}/roleStation/findMany`, args, options, fetch);
}

export function useInfiniteFindManyRoleStation<TArgs extends Prisma.RoleStationFindManyArgs, TQueryFnData = Array<Prisma.RoleStationGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.RoleStationFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.RoleStationFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('RoleStation', `${endpoint}/roleStation/findMany`, args, options, fetch);
}

export function useFindUniqueRoleStation<TArgs extends Prisma.RoleStationFindUniqueArgs, TQueryFnData = Prisma.RoleStationGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.RoleStationFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.RoleStationFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RoleStation', `${endpoint}/roleStation/findUnique`, args, options, fetch);
}

export function useFindFirstRoleStation<TArgs extends Prisma.RoleStationFindFirstArgs, TQueryFnData = Prisma.RoleStationGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.RoleStationFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.RoleStationFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RoleStation', `${endpoint}/roleStation/findFirst`, args, options, fetch);
}

export function useUpdateRoleStation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(RoleStation | undefined), DefaultError, Prisma.RoleStationUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(RoleStation | undefined), DefaultError, Prisma.RoleStationUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoleStationUpdateArgs, DefaultError, RoleStation, true>('RoleStation', 'PUT', `${endpoint}/roleStation/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoleStationUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoleStationUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, RoleStation, Prisma.RoleStationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RoleStationUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, RoleStation, Prisma.RoleStationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RoleStationUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RoleStation, Prisma.RoleStationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyRoleStation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RoleStationUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RoleStationUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoleStationUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('RoleStation', 'PUT', `${endpoint}/roleStation/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoleStationUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoleStationUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RoleStationUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RoleStationUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertRoleStation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(RoleStation | undefined), DefaultError, Prisma.RoleStationUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(RoleStation | undefined), DefaultError, Prisma.RoleStationUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoleStationUpsertArgs, DefaultError, RoleStation, true>('RoleStation', 'POST', `${endpoint}/roleStation/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoleStationUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoleStationUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, RoleStation, Prisma.RoleStationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RoleStationUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, RoleStation, Prisma.RoleStationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RoleStationUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RoleStation, Prisma.RoleStationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteRoleStation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(RoleStation | undefined), DefaultError, Prisma.RoleStationDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(RoleStation | undefined), DefaultError, Prisma.RoleStationDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoleStationDeleteArgs, DefaultError, RoleStation, true>('RoleStation', 'DELETE', `${endpoint}/roleStation/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoleStationDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoleStationDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, RoleStation, Prisma.RoleStationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RoleStationDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, RoleStation, Prisma.RoleStationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RoleStationDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RoleStation, Prisma.RoleStationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyRoleStation(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RoleStationDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RoleStationDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoleStationDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('RoleStation', 'DELETE', `${endpoint}/roleStation/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoleStationDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoleStationDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RoleStationDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RoleStationDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateRoleStation<TArgs extends Prisma.RoleStationAggregateArgs, TQueryFnData = Prisma.GetRoleStationAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.RoleStationAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.RoleStationAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RoleStation', `${endpoint}/roleStation/aggregate`, args, options, fetch);
}

export function useGroupByRoleStation<TArgs extends Prisma.RoleStationGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.RoleStationGroupByArgs['orderBy'] } : { orderBy?: Prisma.RoleStationGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.RoleStationGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.RoleStationGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.RoleStationGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.RoleStationGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.RoleStationGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.RoleStationGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RoleStation', `${endpoint}/roleStation/groupBy`, args, options, fetch);
}

export function useCountRoleStation<TArgs extends Prisma.RoleStationCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.RoleStationCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.RoleStationCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.RoleStationCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RoleStation', `${endpoint}/roleStation/count`, args, options, fetch);
}

export function useCheckRoleStation<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { roleId?: string; stationId?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('RoleStation', `${endpoint}/roleStation/check`, args, options, fetch);
}
