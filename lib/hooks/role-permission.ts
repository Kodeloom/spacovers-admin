/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, RolePermission } from "../../shared/generated/prisma";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateRolePermission(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(RolePermission | undefined), DefaultError, Prisma.RolePermissionCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(RolePermission | undefined), DefaultError, Prisma.RolePermissionCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RolePermissionCreateArgs, DefaultError, RolePermission, true>('RolePermission', 'POST', `${endpoint}/rolePermission/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RolePermissionCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.RolePermissionCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, RolePermission, Prisma.RolePermissionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RolePermissionCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, RolePermission, Prisma.RolePermissionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RolePermissionCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RolePermission, Prisma.RolePermissionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyRolePermission(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RolePermissionCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RolePermissionCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RolePermissionCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('RolePermission', 'POST', `${endpoint}/rolePermission/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RolePermissionCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RolePermissionCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RolePermissionCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RolePermissionCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyRolePermission<TArgs extends Prisma.RolePermissionFindManyArgs, TQueryFnData = Array<Prisma.RolePermissionGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.RolePermissionFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.RolePermissionFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RolePermission', `${endpoint}/rolePermission/findMany`, args, options, fetch);
}

export function useInfiniteFindManyRolePermission<TArgs extends Prisma.RolePermissionFindManyArgs, TQueryFnData = Array<Prisma.RolePermissionGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.RolePermissionFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.RolePermissionFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('RolePermission', `${endpoint}/rolePermission/findMany`, args, options, fetch);
}

export function useFindUniqueRolePermission<TArgs extends Prisma.RolePermissionFindUniqueArgs, TQueryFnData = Prisma.RolePermissionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.RolePermissionFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.RolePermissionFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RolePermission', `${endpoint}/rolePermission/findUnique`, args, options, fetch);
}

export function useFindFirstRolePermission<TArgs extends Prisma.RolePermissionFindFirstArgs, TQueryFnData = Prisma.RolePermissionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.RolePermissionFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.RolePermissionFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RolePermission', `${endpoint}/rolePermission/findFirst`, args, options, fetch);
}

export function useUpdateRolePermission(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(RolePermission | undefined), DefaultError, Prisma.RolePermissionUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(RolePermission | undefined), DefaultError, Prisma.RolePermissionUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RolePermissionUpdateArgs, DefaultError, RolePermission, true>('RolePermission', 'PUT', `${endpoint}/rolePermission/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RolePermissionUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.RolePermissionUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, RolePermission, Prisma.RolePermissionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RolePermissionUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, RolePermission, Prisma.RolePermissionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RolePermissionUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RolePermission, Prisma.RolePermissionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyRolePermission(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RolePermissionUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RolePermissionUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RolePermissionUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('RolePermission', 'PUT', `${endpoint}/rolePermission/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RolePermissionUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RolePermissionUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RolePermissionUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RolePermissionUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertRolePermission(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(RolePermission | undefined), DefaultError, Prisma.RolePermissionUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(RolePermission | undefined), DefaultError, Prisma.RolePermissionUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RolePermissionUpsertArgs, DefaultError, RolePermission, true>('RolePermission', 'POST', `${endpoint}/rolePermission/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RolePermissionUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.RolePermissionUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, RolePermission, Prisma.RolePermissionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RolePermissionUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, RolePermission, Prisma.RolePermissionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RolePermissionUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RolePermission, Prisma.RolePermissionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteRolePermission(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(RolePermission | undefined), DefaultError, Prisma.RolePermissionDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(RolePermission | undefined), DefaultError, Prisma.RolePermissionDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RolePermissionDeleteArgs, DefaultError, RolePermission, true>('RolePermission', 'DELETE', `${endpoint}/rolePermission/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RolePermissionDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.RolePermissionDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, RolePermission, Prisma.RolePermissionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RolePermissionDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, RolePermission, Prisma.RolePermissionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RolePermissionDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RolePermission, Prisma.RolePermissionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyRolePermission(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RolePermissionDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RolePermissionDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RolePermissionDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('RolePermission', 'DELETE', `${endpoint}/rolePermission/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RolePermissionDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RolePermissionDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RolePermissionDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RolePermissionDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateRolePermission<TArgs extends Prisma.RolePermissionAggregateArgs, TQueryFnData = Prisma.GetRolePermissionAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.RolePermissionAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.RolePermissionAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RolePermission', `${endpoint}/rolePermission/aggregate`, args, options, fetch);
}

export function useGroupByRolePermission<TArgs extends Prisma.RolePermissionGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.RolePermissionGroupByArgs['orderBy'] } : { orderBy?: Prisma.RolePermissionGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.RolePermissionGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.RolePermissionGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.RolePermissionGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.RolePermissionGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.RolePermissionGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.RolePermissionGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RolePermission', `${endpoint}/rolePermission/groupBy`, args, options, fetch);
}

export function useCountRolePermission<TArgs extends Prisma.RolePermissionCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.RolePermissionCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.RolePermissionCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.RolePermissionCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RolePermission', `${endpoint}/rolePermission/count`, args, options, fetch);
}

export function useCheckRolePermission<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { roleId?: string; permissionId?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('RolePermission', `${endpoint}/rolePermission/check`, args, options, fetch);
}
