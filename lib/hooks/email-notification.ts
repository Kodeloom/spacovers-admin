/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, EmailNotification } from "@prisma-app/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateEmailNotification(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(EmailNotification | undefined), DefaultError, Prisma.EmailNotificationCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(EmailNotification | undefined), DefaultError, Prisma.EmailNotificationCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EmailNotificationCreateArgs, DefaultError, EmailNotification, true>('EmailNotification', 'POST', `${endpoint}/emailNotification/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EmailNotificationCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.EmailNotificationCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, EmailNotification, Prisma.EmailNotificationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EmailNotificationCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, EmailNotification, Prisma.EmailNotificationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EmailNotificationCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, EmailNotification, Prisma.EmailNotificationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyEmailNotification(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EmailNotificationCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EmailNotificationCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EmailNotificationCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('EmailNotification', 'POST', `${endpoint}/emailNotification/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EmailNotificationCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.EmailNotificationCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EmailNotificationCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EmailNotificationCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyEmailNotification<TArgs extends Prisma.EmailNotificationFindManyArgs, TQueryFnData = Array<Prisma.EmailNotificationGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EmailNotificationFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EmailNotificationFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('EmailNotification', `${endpoint}/emailNotification/findMany`, args, options, fetch);
}

export function useInfiniteFindManyEmailNotification<TArgs extends Prisma.EmailNotificationFindManyArgs, TQueryFnData = Array<Prisma.EmailNotificationGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EmailNotificationFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EmailNotificationFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('EmailNotification', `${endpoint}/emailNotification/findMany`, args, options, fetch);
}

export function useFindUniqueEmailNotification<TArgs extends Prisma.EmailNotificationFindUniqueArgs, TQueryFnData = Prisma.EmailNotificationGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EmailNotificationFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EmailNotificationFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('EmailNotification', `${endpoint}/emailNotification/findUnique`, args, options, fetch);
}

export function useFindFirstEmailNotification<TArgs extends Prisma.EmailNotificationFindFirstArgs, TQueryFnData = Prisma.EmailNotificationGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EmailNotificationFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EmailNotificationFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('EmailNotification', `${endpoint}/emailNotification/findFirst`, args, options, fetch);
}

export function useUpdateEmailNotification(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(EmailNotification | undefined), DefaultError, Prisma.EmailNotificationUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(EmailNotification | undefined), DefaultError, Prisma.EmailNotificationUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EmailNotificationUpdateArgs, DefaultError, EmailNotification, true>('EmailNotification', 'PUT', `${endpoint}/emailNotification/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EmailNotificationUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.EmailNotificationUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, EmailNotification, Prisma.EmailNotificationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EmailNotificationUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, EmailNotification, Prisma.EmailNotificationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EmailNotificationUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, EmailNotification, Prisma.EmailNotificationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyEmailNotification(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EmailNotificationUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EmailNotificationUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EmailNotificationUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('EmailNotification', 'PUT', `${endpoint}/emailNotification/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EmailNotificationUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.EmailNotificationUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EmailNotificationUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EmailNotificationUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertEmailNotification(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(EmailNotification | undefined), DefaultError, Prisma.EmailNotificationUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(EmailNotification | undefined), DefaultError, Prisma.EmailNotificationUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EmailNotificationUpsertArgs, DefaultError, EmailNotification, true>('EmailNotification', 'POST', `${endpoint}/emailNotification/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EmailNotificationUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.EmailNotificationUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, EmailNotification, Prisma.EmailNotificationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EmailNotificationUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, EmailNotification, Prisma.EmailNotificationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EmailNotificationUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, EmailNotification, Prisma.EmailNotificationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteEmailNotification(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(EmailNotification | undefined), DefaultError, Prisma.EmailNotificationDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(EmailNotification | undefined), DefaultError, Prisma.EmailNotificationDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EmailNotificationDeleteArgs, DefaultError, EmailNotification, true>('EmailNotification', 'DELETE', `${endpoint}/emailNotification/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EmailNotificationDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.EmailNotificationDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, EmailNotification, Prisma.EmailNotificationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EmailNotificationDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, EmailNotification, Prisma.EmailNotificationGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.EmailNotificationDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, EmailNotification, Prisma.EmailNotificationGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyEmailNotification(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EmailNotificationDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.EmailNotificationDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.EmailNotificationDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('EmailNotification', 'DELETE', `${endpoint}/emailNotification/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.EmailNotificationDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.EmailNotificationDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EmailNotificationDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.EmailNotificationDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateEmailNotification<TArgs extends Prisma.EmailNotificationAggregateArgs, TQueryFnData = Prisma.GetEmailNotificationAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EmailNotificationAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EmailNotificationAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('EmailNotification', `${endpoint}/emailNotification/aggregate`, args, options, fetch);
}

export function useGroupByEmailNotification<TArgs extends Prisma.EmailNotificationGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.EmailNotificationGroupByArgs['orderBy'] } : { orderBy?: Prisma.EmailNotificationGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.EmailNotificationGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.EmailNotificationGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.EmailNotificationGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.EmailNotificationGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.EmailNotificationGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.EmailNotificationGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('EmailNotification', `${endpoint}/emailNotification/groupBy`, args, options, fetch);
}

export function useCountEmailNotification<TArgs extends Prisma.EmailNotificationCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.EmailNotificationCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.EmailNotificationCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.EmailNotificationCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('EmailNotification', `${endpoint}/emailNotification/count`, args, options, fetch);
}

export function useCheckEmailNotification<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; orderId?: string; emailType?: string; recipientEmail?: string; subject?: string; retryCount?: number; errorMessage?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('EmailNotification', `${endpoint}/emailNotification/check`, args, options, fetch);
}
