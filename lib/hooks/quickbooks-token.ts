/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, QuickbooksToken } from "@prisma-app/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateQuickbooksToken(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(QuickbooksToken | undefined), DefaultError, Prisma.QuickbooksTokenCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(QuickbooksToken | undefined), DefaultError, Prisma.QuickbooksTokenCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuickbooksTokenCreateArgs, DefaultError, QuickbooksToken, true>('QuickbooksToken', 'POST', `${endpoint}/quickbooksToken/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuickbooksTokenCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuickbooksTokenCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, QuickbooksToken, Prisma.QuickbooksTokenGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuickbooksTokenCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, QuickbooksToken, Prisma.QuickbooksTokenGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuickbooksTokenCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, QuickbooksToken, Prisma.QuickbooksTokenGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyQuickbooksToken(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.QuickbooksTokenCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.QuickbooksTokenCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuickbooksTokenCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('QuickbooksToken', 'POST', `${endpoint}/quickbooksToken/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuickbooksTokenCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuickbooksTokenCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.QuickbooksTokenCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.QuickbooksTokenCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyQuickbooksToken<TArgs extends Prisma.QuickbooksTokenFindManyArgs, TQueryFnData = Array<Prisma.QuickbooksTokenGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.QuickbooksTokenFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.QuickbooksTokenFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('QuickbooksToken', `${endpoint}/quickbooksToken/findMany`, args, options, fetch);
}

export function useInfiniteFindManyQuickbooksToken<TArgs extends Prisma.QuickbooksTokenFindManyArgs, TQueryFnData = Array<Prisma.QuickbooksTokenGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.QuickbooksTokenFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.QuickbooksTokenFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('QuickbooksToken', `${endpoint}/quickbooksToken/findMany`, args, options, fetch);
}

export function useFindUniqueQuickbooksToken<TArgs extends Prisma.QuickbooksTokenFindUniqueArgs, TQueryFnData = Prisma.QuickbooksTokenGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.QuickbooksTokenFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.QuickbooksTokenFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('QuickbooksToken', `${endpoint}/quickbooksToken/findUnique`, args, options, fetch);
}

export function useFindFirstQuickbooksToken<TArgs extends Prisma.QuickbooksTokenFindFirstArgs, TQueryFnData = Prisma.QuickbooksTokenGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.QuickbooksTokenFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.QuickbooksTokenFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('QuickbooksToken', `${endpoint}/quickbooksToken/findFirst`, args, options, fetch);
}

export function useUpdateQuickbooksToken(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(QuickbooksToken | undefined), DefaultError, Prisma.QuickbooksTokenUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(QuickbooksToken | undefined), DefaultError, Prisma.QuickbooksTokenUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuickbooksTokenUpdateArgs, DefaultError, QuickbooksToken, true>('QuickbooksToken', 'PUT', `${endpoint}/quickbooksToken/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuickbooksTokenUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuickbooksTokenUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, QuickbooksToken, Prisma.QuickbooksTokenGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuickbooksTokenUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, QuickbooksToken, Prisma.QuickbooksTokenGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuickbooksTokenUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, QuickbooksToken, Prisma.QuickbooksTokenGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyQuickbooksToken(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.QuickbooksTokenUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.QuickbooksTokenUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuickbooksTokenUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('QuickbooksToken', 'PUT', `${endpoint}/quickbooksToken/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuickbooksTokenUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuickbooksTokenUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.QuickbooksTokenUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.QuickbooksTokenUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertQuickbooksToken(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(QuickbooksToken | undefined), DefaultError, Prisma.QuickbooksTokenUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(QuickbooksToken | undefined), DefaultError, Prisma.QuickbooksTokenUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuickbooksTokenUpsertArgs, DefaultError, QuickbooksToken, true>('QuickbooksToken', 'POST', `${endpoint}/quickbooksToken/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuickbooksTokenUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuickbooksTokenUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, QuickbooksToken, Prisma.QuickbooksTokenGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuickbooksTokenUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, QuickbooksToken, Prisma.QuickbooksTokenGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuickbooksTokenUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, QuickbooksToken, Prisma.QuickbooksTokenGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteQuickbooksToken(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(QuickbooksToken | undefined), DefaultError, Prisma.QuickbooksTokenDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(QuickbooksToken | undefined), DefaultError, Prisma.QuickbooksTokenDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuickbooksTokenDeleteArgs, DefaultError, QuickbooksToken, true>('QuickbooksToken', 'DELETE', `${endpoint}/quickbooksToken/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuickbooksTokenDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuickbooksTokenDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, QuickbooksToken, Prisma.QuickbooksTokenGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuickbooksTokenDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, QuickbooksToken, Prisma.QuickbooksTokenGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuickbooksTokenDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, QuickbooksToken, Prisma.QuickbooksTokenGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyQuickbooksToken(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.QuickbooksTokenDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.QuickbooksTokenDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuickbooksTokenDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('QuickbooksToken', 'DELETE', `${endpoint}/quickbooksToken/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuickbooksTokenDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuickbooksTokenDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.QuickbooksTokenDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.QuickbooksTokenDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateQuickbooksToken<TArgs extends Prisma.QuickbooksTokenAggregateArgs, TQueryFnData = Prisma.GetQuickbooksTokenAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.QuickbooksTokenAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.QuickbooksTokenAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('QuickbooksToken', `${endpoint}/quickbooksToken/aggregate`, args, options, fetch);
}

export function useGroupByQuickbooksToken<TArgs extends Prisma.QuickbooksTokenGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.QuickbooksTokenGroupByArgs['orderBy'] } : { orderBy?: Prisma.QuickbooksTokenGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.QuickbooksTokenGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.QuickbooksTokenGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.QuickbooksTokenGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.QuickbooksTokenGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.QuickbooksTokenGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.QuickbooksTokenGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('QuickbooksToken', `${endpoint}/quickbooksToken/groupBy`, args, options, fetch);
}

export function useCountQuickbooksToken<TArgs extends Prisma.QuickbooksTokenCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.QuickbooksTokenCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.QuickbooksTokenCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.QuickbooksTokenCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('QuickbooksToken', `${endpoint}/quickbooksToken/count`, args, options, fetch);
}

export function useCheckQuickbooksToken<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; realmId?: string; accessToken?: string; refreshToken?: string; tokenType?: string; expiresIn?: number; xRefreshTokenExpiresIn?: number; userId?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('QuickbooksToken', `${endpoint}/quickbooksToken/check`, args, options, fetch);
}
