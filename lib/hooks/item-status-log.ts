/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ItemStatusLog } from "@prisma-app/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateItemStatusLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(ItemStatusLog | undefined), DefaultError, Prisma.ItemStatusLogCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(ItemStatusLog | undefined), DefaultError, Prisma.ItemStatusLogCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ItemStatusLogCreateArgs, DefaultError, ItemStatusLog, true>('ItemStatusLog', 'POST', `${endpoint}/itemStatusLog/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ItemStatusLogCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ItemStatusLogCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, ItemStatusLog, Prisma.ItemStatusLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ItemStatusLogCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, ItemStatusLog, Prisma.ItemStatusLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ItemStatusLogCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ItemStatusLog, Prisma.ItemStatusLogGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyItemStatusLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ItemStatusLogCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ItemStatusLogCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ItemStatusLogCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ItemStatusLog', 'POST', `${endpoint}/itemStatusLog/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ItemStatusLogCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ItemStatusLogCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ItemStatusLogCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ItemStatusLogCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyItemStatusLog<TArgs extends Prisma.ItemStatusLogFindManyArgs, TQueryFnData = Array<Prisma.ItemStatusLogGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ItemStatusLogFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ItemStatusLogFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ItemStatusLog', `${endpoint}/itemStatusLog/findMany`, args, options, fetch);
}

export function useInfiniteFindManyItemStatusLog<TArgs extends Prisma.ItemStatusLogFindManyArgs, TQueryFnData = Array<Prisma.ItemStatusLogGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ItemStatusLogFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ItemStatusLogFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ItemStatusLog', `${endpoint}/itemStatusLog/findMany`, args, options, fetch);
}

export function useFindUniqueItemStatusLog<TArgs extends Prisma.ItemStatusLogFindUniqueArgs, TQueryFnData = Prisma.ItemStatusLogGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ItemStatusLogFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ItemStatusLogFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ItemStatusLog', `${endpoint}/itemStatusLog/findUnique`, args, options, fetch);
}

export function useFindFirstItemStatusLog<TArgs extends Prisma.ItemStatusLogFindFirstArgs, TQueryFnData = Prisma.ItemStatusLogGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ItemStatusLogFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ItemStatusLogFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ItemStatusLog', `${endpoint}/itemStatusLog/findFirst`, args, options, fetch);
}

export function useUpdateItemStatusLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(ItemStatusLog | undefined), DefaultError, Prisma.ItemStatusLogUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(ItemStatusLog | undefined), DefaultError, Prisma.ItemStatusLogUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ItemStatusLogUpdateArgs, DefaultError, ItemStatusLog, true>('ItemStatusLog', 'PUT', `${endpoint}/itemStatusLog/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ItemStatusLogUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ItemStatusLogUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, ItemStatusLog, Prisma.ItemStatusLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ItemStatusLogUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, ItemStatusLog, Prisma.ItemStatusLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ItemStatusLogUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ItemStatusLog, Prisma.ItemStatusLogGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyItemStatusLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ItemStatusLogUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ItemStatusLogUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ItemStatusLogUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ItemStatusLog', 'PUT', `${endpoint}/itemStatusLog/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ItemStatusLogUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ItemStatusLogUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ItemStatusLogUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ItemStatusLogUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertItemStatusLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(ItemStatusLog | undefined), DefaultError, Prisma.ItemStatusLogUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(ItemStatusLog | undefined), DefaultError, Prisma.ItemStatusLogUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ItemStatusLogUpsertArgs, DefaultError, ItemStatusLog, true>('ItemStatusLog', 'POST', `${endpoint}/itemStatusLog/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ItemStatusLogUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ItemStatusLogUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, ItemStatusLog, Prisma.ItemStatusLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ItemStatusLogUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, ItemStatusLog, Prisma.ItemStatusLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ItemStatusLogUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ItemStatusLog, Prisma.ItemStatusLogGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteItemStatusLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(ItemStatusLog | undefined), DefaultError, Prisma.ItemStatusLogDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(ItemStatusLog | undefined), DefaultError, Prisma.ItemStatusLogDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ItemStatusLogDeleteArgs, DefaultError, ItemStatusLog, true>('ItemStatusLog', 'DELETE', `${endpoint}/itemStatusLog/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ItemStatusLogDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ItemStatusLogDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, ItemStatusLog, Prisma.ItemStatusLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ItemStatusLogDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, ItemStatusLog, Prisma.ItemStatusLogGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ItemStatusLogDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ItemStatusLog, Prisma.ItemStatusLogGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyItemStatusLog(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ItemStatusLogDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ItemStatusLogDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ItemStatusLogDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ItemStatusLog', 'DELETE', `${endpoint}/itemStatusLog/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ItemStatusLogDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ItemStatusLogDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ItemStatusLogDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ItemStatusLogDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateItemStatusLog<TArgs extends Prisma.ItemStatusLogAggregateArgs, TQueryFnData = Prisma.GetItemStatusLogAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ItemStatusLogAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ItemStatusLogAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ItemStatusLog', `${endpoint}/itemStatusLog/aggregate`, args, options, fetch);
}

export function useGroupByItemStatusLog<TArgs extends Prisma.ItemStatusLogGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ItemStatusLogGroupByArgs['orderBy'] } : { orderBy?: Prisma.ItemStatusLogGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ItemStatusLogGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ItemStatusLogGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ItemStatusLogGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ItemStatusLogGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ItemStatusLogGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ItemStatusLogGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ItemStatusLog', `${endpoint}/itemStatusLog/groupBy`, args, options, fetch);
}

export function useCountItemStatusLog<TArgs extends Prisma.ItemStatusLogCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ItemStatusLogCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.ItemStatusLogCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.ItemStatusLogCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ItemStatusLog', `${endpoint}/itemStatusLog/count`, args, options, fetch);
}
import type { OrderItemProcessingStatus } from '@prisma-app/client';

export function useCheckItemStatusLog<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; orderItemId?: string; userId?: string; fromStatus?: OrderItemProcessingStatus; toStatus?: OrderItemProcessingStatus; changeReason?: string; triggeredBy?: string; notes?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ItemStatusLog', `${endpoint}/itemStatusLog/check`, args, options, fetch);
}
