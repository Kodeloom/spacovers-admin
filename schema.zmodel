// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../shared/generated/prisma"
  previewFeatures = ["driverAdapters"]
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  moduleFormat = "esm"
}


plugin hooks {
    provider = '@zenstackhq/tanstack-query'
    target = 'vue'
    output = 'lib/hooks' // This is a common output path, adjust if needed
}

// Enums

enum UserStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum CustomerType {
  RETAILER
  WHOLESALER
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ItemStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum OrderSystemStatus { // Renamed to avoid conflict with OrderItemStatus for clarity
  PENDING
  APPROVED
  ORDER_PROCESSING
  READY_TO_SHIP
  SHIPPED
  COMPLETED
  CANCELLED
}

enum OrderItemProcessingStatus { // Renamed for clarity
  NOT_STARTED_PRODUCTION
  CUTTING
  SEWING
  WRAPPING
  READY
}

// Models

model User {
  id            String     @id @default(cuid())
  name          String
  email         String     @unique
  contactNumber String?
  passwordHash  String // Managed by Better-Auth
  emailVerified DateTime?  // Managed by Better-Auth
  image         String?    // Added by Better-Auth
  status        UserStatus @default(ACTIVE)
  hourlyRate    Decimal?   @db.Decimal(10, 2)

  organizationId String? // For Better-Auth multi-tenancy if used

  roles           UserRole[]
  itemProcessingLogs ItemProcessingLog[]
  auditLogs       AuditLog[]
  sessions        Session[]  // Added by Better-Auth
  accounts        Account[]  // Added by Better-Auth

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Access Control Policies
  // Deny all operations by default if not logged in (applied to all models implicitly by ZenStack if no general allow rule exists)
  // @@deny('all', auth() == null) // This can be a global rule or per-model

  // Admins can manage any user
  @@allow('all', auth() != null && auth().roles?[role.name == "Admin"]) // Assuming 'Admin' role name
  // Users can read their own profile
  @@allow('read', auth() != null && auth().id == id)
  // Users can update specific fields of their own profile (e.g., name, contactNumber, image, potentially password via a special flow)
  // More granular field-level controls can be added later if needed for self-service updates.
  @@allow('update', auth() != null && auth().id == id) // For now, general update for self

  @@map("user")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  users       UserRole[]
  permissions RolePermission[]
  stations    RoleStation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Access Control Policies
  // Only Admins can manage roles
  @@allow('all', auth() != null && auth().roles?[role.name == "Admin"])
}

model Permission {
  id          String   @id @default(cuid())
  action      String   // e.g., "create", "read", "update", "delete"
  subject     String   // e.g., "User", "Order", "CustomerItem"
  description String?
  roles       RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([action, subject])

  // Access Control Policies
  // Only Admins can manage permissions
  @@allow('all', auth() != null && auth().roles?[role.name == "Admin"])
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())
  assignedBy String? // Potentially a user ID or name

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  @@id([roleId, permissionId])
}

model Customer {
  id                   String          @id @default(cuid())
  quickbooksCustomerId String?         @unique // For QBO sync
  name                 String
  contactNumber        String?
  email                String?
  type                 CustomerType
  status               CustomerStatus  @default(ACTIVE)
  shippingAddressLine1 String?
  shippingAddressLine2 String?
  shippingCity         String?
  shippingState        String?
  shippingZipCode      String?
  shippingCountry      String?
  billingAddressLine1  String?
  billingAddressLine2  String?
  billingCity          String?
  billingState         String?
  billingZipCode       String?
  billingCountry       String?

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id               String     @id @default(cuid())
  quickbooksItemId String?    @unique // For QBO sync
  name             String
  imageUrl         String?
  category         String?
  wholesalePrice   Decimal?   @db.Decimal(10, 2)
  retailPrice      Decimal?   @db.Decimal(10, 2)
  cost             Decimal?   @db.Decimal(10, 2)
  description      String?
  status           ItemStatus @default(ACTIVE)

  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Station {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "Cutting", "Sewing", "Wrapping"
  barcode     String?  @unique // For scanning the station itself
  description String?

  roles             RoleStation[]
  itemProcessingLogs ItemProcessingLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoleStation {
  roleId    String
  stationId String
  role      Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  station   Station @relation(fields: [stationId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  @@id([roleId, stationId])
}

model Order {
  id                    String            @id @default(cuid())
  quickbooksOrderId     String?           @unique // For QBO sync
  customerId            String
  customer              Customer          @relation(fields: [customerId], references: [id])
  salesOrderNumber      String?           // Ideally unique from QBO
  purchaseOrderNumber   String?
  contactEmail          String            // Can be from customer, but modifiable
  contactPhoneNumber    String?           // Can be from customer, but modifiable
  billingAddressLine1   String?
  billingAddressLine2   String?
  billingCity           String?
  billingState          String?
  billingZipCode        String?
  billingCountry        String?
  shippingAddressLine1  String?
  shippingAddressLine2  String?
  shippingCity          String?
  shippingState         String?
  shippingZipCode       String?
  shippingCountry       String?
  orderStatus           OrderSystemStatus @default(PENDING)
  barcode               String?           @unique // Generated for warehouse tracking
  approvedAt            DateTime?
  readyToShipAt         DateTime?
  shippedAt             DateTime?
  notes                 String?           @db.Text

  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id                      String                    @id @default(cuid())
  orderId                 String
  order                   Order                     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  itemId                  String
  item                    Item                      @relation(fields: [itemId], references: [id])
  quickbooksOrderLineId   String?                   @unique // If QBO provides line item IDs
  quantity                Int
  pricePerItem            Decimal                   @db.Decimal(10, 2) // Price at the time of order
  itemStatus              OrderItemProcessingStatus @default(NOT_STARTED_PRODUCTION)
  notes                   String?                   @db.Text

  itemProcessingLogs ItemProcessingLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ItemProcessingLog {
  id                String   @id @default(cuid())
  orderItemId       String
  orderItem         OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  stationId         String
  station           Station  @relation(fields: [stationId], references: [id])
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  startTime         DateTime
  endTime           DateTime? // NULL means currently in progress
  durationInSeconds Int?      // Calculated when endTime is set
  notes             String?  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull) // SetNull if user is deleted
  action     String   // e.g., "USER_LOGIN", "UPDATE_ORDER_STATUS"
  entityName String?  // e.g., "Order", "User"
  entityId   String?  // PK of the affected entity
  oldValue   Json?    // Stores previous state for updates
  newValue   Json?    // Stores new state for updates/creates
  ipAddress  String?
  timestamp  DateTime @default(now())

  @@index([entityName, entityId])
  @@index([userId])
  @@index([action])
}
// Better Auth Models
model Session {
  id        String   @id @default(cuid()) // Assuming cuid for consistency, though BA might use something else
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid()) // Assuming cuid for consistency
  accountId             String    // Provider specific account ID
  providerId            String    // e.g., "github", "google"
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text // Access tokens can be long
  refreshToken          String?   @db.Text // Refresh tokens can be long
  idToken               String?   @db.Text // ID tokens can be long
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?   // Potentially for provider-specific app passwords?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([providerId, accountId]) // Ensures unique account per provider for a user
  @@map("account")
}

model Verification {
  id         String    @id @default(cuid()) // Assuming cuid for consistency
  identifier String    // e.g., email address or user ID
  value      String    @unique // Verification token should be unique
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("verification")
}
