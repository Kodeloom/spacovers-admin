// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma-app/client"
}


plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  target = 'vue'
  output = 'lib/hooks' // This is a common output path, adjust if needed
}

// Enums

enum UserStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum CustomerType {
  RETAILER
  CA_RETAIL
  WHOLESALER
  CA_WHOLESALE
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ItemStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum OrderSystemStatus { // Renamed to avoid conflict with OrderItemStatus for clarity
  PENDING
  APPROVED
  ORDER_PROCESSING
  READY_TO_SHIP
  SHIPPED
  COMPLETED
  CANCELLED
  ARCHIVED
}

enum OrderItemProcessingStatus { // Renamed for clarity
  NOT_STARTED_PRODUCTION
  CUTTING
  SEWING
  FOAM_CUTTING
  READY
}

// Models

model User {
  id                 String              @id @default(cuid())
  name               String
  email              String              @unique
  contactNumber      String?
  passwordHash       String? // Managed by Better-Auth, now optional
  emailVerified      Boolean?  // Managed by Better-Auth
  image              String?    // Added by Better-Auth
  status             UserStatus          @default(ACTIVE)
  hourlyRate         Decimal?            @db.Decimal(10, 2)
  organizationId     String? // For Better-Auth multi-tenancy if used

  // Fields for Better Auth Admin Plugin
  banned             Boolean?  // New
  banReason          String?   // New
  banExpires         DateTime? // New

  roles              UserRole[]
  itemProcessingLogs ItemProcessingLog[]
  auditLogs          AuditLog[]
  sessions           Session[]  // Added by Better-Auth
  accounts           Account[]  // Added by Better-Auth
  quickbooksToken    QuickbooksToken?

  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  role               String?

  // Access Control Policies - HYBRID APPROACH
  
  // ROLE-BASED: Admin access for user management
  @@allow('create,read,update', auth() != null && auth().roles?[role.name in ["Super Admin", "Admin"]])

  // SELF-SERVICE: Users can read/update their own profile
  @@allow('read', auth() != null && id == auth().id)
  @@allow('update', auth() != null && id == auth().id) 

  // DELETE POLICIES with protection
  @@deny('delete', auth() != null && id == auth().id) // No self-deletion
  @@allow('delete', auth() != null && auth().roles?[role.name == "Super Admin"])
  @@deny('delete', auth() != null && auth().roles?[role.name == "Admin"] && roles?[role.name == "Super Admin"]) // Admins can't delete Super Admins
  @@allow('delete', auth() != null && auth().roles?[role.name == "Admin"])

  @@map("user")
}

model RoleType {
  id                 String   @id @default(cuid())
  name               String   @unique // e.g., "Office Employee", "Warehouse Staff", "Manager"
  description        String?
  color              String?   // For UI display (e.g., "#3B82F6")
  canUseStations     Boolean  @default(false) // Whether roles of this type can be assigned to stations
  isSystem           Boolean  @default(false) // System-defined types that can't be deleted
  displayOrder       Int      @default(0) // For UI ordering
  
  // Default permissions for this role type (JSON structure)
  defaultPermissions Json? // Structure: { "subjects": ["Order", "Item"], "actions": ["read", "update"] }

  roles              Role[]

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Access Control Policies - ROLE-BASED (Admin-only)
  @@allow('all', auth() != null && auth().roles?[role.name in ["Super Admin", "Admin"]])
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  
  // Role Type association
  roleTypeId  String?
  roleType    RoleType?        @relation(fields: [roleTypeId], references: [id], onDelete: SetNull)

  users       UserRole[]
  permissions RolePermission[]
  stations    RoleStation[]

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Access Control Policies - ROLE-BASED (Admin-only)
  @@allow('all', auth() != null && auth().roles?[role.name in ["Super Admin", "Admin"]])
}

model Permission {
  id          String           @id @default(cuid())
  action      String   // e.g., "create", "read", "update", "delete"
  subject     String   // e.g., "User", "Order", "CustomerItem"
  description String?
  roles       RolePermission[]

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([action, subject])

  // Access Control Policies - ROLE-BASED (Admin-only for security)
  @@allow('all', auth() != null && auth().roles?[role.name == "Super Admin"])
  @@allow('read', auth() != null && auth().roles?[role.name == "Admin"]) // Admins can view permissions
}

model UserRole {
  userId     String
  roleId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())
  assignedBy String? // Potentially a user ID or name

  @@id([userId, roleId])

  // Access Control Policies - ADMIN-ONLY (User role management)
  @@allow('all', auth() != null && auth().roles?[role.name in ["Super Admin", "Admin"]])
  @@allow('read', auth() != null) // Anyone can see role assignments
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  assignedAt   DateTime   @default(now())

  @@id([roleId, permissionId])
  
  // Access Control Policies - ADMIN-ONLY (Permission management)
  @@allow('all', auth() != null && auth().roles?[role.name == "Super Admin"])
  @@allow('read', auth() != null && auth().roles?[role.name == "Admin"]) // Admins can view permission assignments
}

model Customer {
  id                   String         @id @default(cuid())
  quickbooksCustomerId String?        @unique // For QBO sync
  name                 String
  contactNumber        String?
  email                String?
  type                 CustomerType
  status               CustomerStatus @default(ACTIVE)
  shippingAddressLine1 String?
  shippingAddressLine2 String?
  shippingCity         String?
  shippingState        String?
  shippingZipCode      String?
  shippingCountry      String?
  billingAddressLine1  String?
  billingAddressLine2  String?
  billingCity          String?
  billingState         String?
  billingZipCode       String?
  billingCountry       String?

  orders               Order[]
  estimates            Estimate[]

  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  // Access Control Policies - ROLE-BASED (Business operations)
  @@allow('all', auth() != null && auth().roles?[role.name in ["Super Admin", "Admin"]])
  @@allow('create,read,update', auth() != null && auth().roles?[role.name == "Customer Service"])
  @@allow('read', auth() != null && auth().roles?[role.name in ["Manager", "Warehouse Staff"]])
}

model Item {
  id                String         @id @default(cuid())
  quickbooksItemId  String?        @unique // For QBO sync
  name              String
  imageUrl          String?
  category          String?
  wholesalePrice    Decimal?       @db.Decimal(10, 2)
  retailPrice       Decimal?       @db.Decimal(10, 2)
  cost              Decimal?       @db.Decimal(10, 2)
  description       String?
  status            ItemStatus     @default(ACTIVE)
  
  // Flag to identify the 4 main spacover items
  isSpacoverProduct Boolean        @default(false)

  orderItems        OrderItem[]
  estimateItems     EstimateItem[]

  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Access Control Policies - ROLE-BASED (Product management)
  @@allow('all', auth() != null && auth().roles?[role.name in ["Super Admin", "Admin"]])
  @@allow('create,read,update', auth() != null && auth().roles?[role.name in ["Manager", "Customer Service"]])
  @@allow('read', auth() != null && auth().roles?[role.name == "Warehouse Staff"])
}

model Product {
  id              String      @id @default(cuid())
  
  // Product specifications
  size            String   // e.g., "93X93"
  shape           String   // e.g., "Round", "Square", "Rectangular"
  pieces          Int      // e.g., 8
  foamThickness   String // e.g., "5\"-2.5\" STEAM STOPPER"
  skit            String   // e.g., "5-FL-SLIT", "Flap", "5 Connected"
  tiedown         String   // e.g., "6-TD", "4 Corner", "4-H"
  color           String   // e.g., "BLACK (VINYL)", "BLUE"
  
  // Pricing
  price           Decimal?    @db.Decimal(10, 2) // Price for this specific product configuration
  
  // Generated fields
  fullDescription String      @unique // Complete formatted description
  displayName     String         // Human-readable name
  
  // Relations
  orderItems      OrderItem[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Access Control Policies
  @@allow('all', auth() != null && auth().roles?[role.name in ["Super Admin", "Admin"]])
  @@allow('create,read,update', auth() != null && auth().roles?[role.name in ["Manager", "Customer Service"]])
  @@allow('read', auth() != null && auth().roles?[role.name == "Warehouse Staff"])
}

model Station {
  id                 String              @id @default(cuid())
  name               String              @unique // e.g., "Cutting", "Sewing", "Wrapping"
  barcode            String?             @unique // For scanning the station itself
  description        String?

  roles              RoleStation[]
  itemProcessingLogs ItemProcessingLog[]

  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Access Control Policies - PERMISSION-BASED (Warehouse setup)
  @@allow('create', auth() != null && auth().roles?[role.permissions?[permission.action == "create" && permission.subject == "Station"]])
  @@allow('read', auth() != null && auth().roles?[role.permissions?[permission.action == "read" && permission.subject == "Station"]])
  @@allow('update', auth() != null && auth().roles?[role.permissions?[permission.action == "update" && permission.subject == "Station"]])
  @@allow('delete', auth() != null && auth().roles?[role.permissions?[permission.action == "delete" && permission.subject == "Station"]])
  
  // ROLE-BASED fallback: Super Admin always has access
  @@allow('all', auth() != null && auth().roles?[role.name == "Super Admin"])
}

model RoleStation {
  roleId     String
  stationId  String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  station    Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  @@id([roleId, stationId])
  
  // Access Control Policies - ADMIN-ONLY (Association management)
  @@allow('all', auth() != null && auth().roles?[role.name in ["Super Admin", "Admin"]])
}

model Order {
  id                   String            @id @default(cuid())
  quickbooksOrderId    String?           @unique
  customerId           String
  salesOrderNumber     String?
  purchaseOrderNumber  String?
  
  // Link to the source Estimate
  estimateId           String?           @unique
  
  // New fields from QBO Invoice
  transactionDate      DateTime?
  dueDate              DateTime?
  shipDate             DateTime?
  trackingNumber       String?
  totalAmount          Decimal?          @db.Decimal(10, 2)
  balance              Decimal?          @db.Decimal(10, 2)
  totalTax             Decimal?          @db.Decimal(10, 2)
  emailStatus          String?           // e.g., 'EmailSent', 'NotSet'
  customerMemo         String?           @db.Text

  // Existing contact and address fields
  contactEmail         String
  contactPhoneNumber   String?
  billingAddressLine1  String?
  billingAddressLine2  String?
  billingCity          String?
  billingState         String?
  billingZipCode       String?
  billingCountry       String?
  shippingAddressLine1 String?
  shippingAddressLine2 String?
  shippingCity         String?
  shippingState        String?
  shippingZipCode      String?
  shippingCountry      String?
  orderStatus          OrderSystemStatus @default(PENDING)
  barcode              String?           @unique
  approvedAt           DateTime?
  readyToShipAt        DateTime?
  shippedAt            DateTime?
  archivedAt           DateTime?
  notes                String?

  customer             Customer          @relation(fields: [customerId], references: [id])
  items                OrderItem[]
  estimate             Estimate?         @relation(fields: [estimateId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  // Access Control Policies - PERMISSION-BASED (Core warehouse operations)
  // Create orders: Customer service, admins
  @@allow('create', auth() != null && auth().roles?[role.permissions?[permission.action == "create" && permission.subject == "Order"]])
  // Read orders: Most roles need to view orders
  @@allow('read', auth() != null && auth().roles?[role.permissions?[permission.action == "read" && permission.subject == "Order"]])
  // Update orders: Approval workflow, status changes
  @@allow('update', auth() != null && auth().roles?[role.permissions?[permission.action == "update" && permission.subject == "Order"]])
  // Delete orders: Admin-only for corrections
  @@allow('delete', auth() != null && auth().roles?[role.permissions?[permission.action == "delete" && permission.subject == "Order"]])
  
  // ROLE-BASED fallback: Super Admin always has access
  @@allow('all', auth() != null && auth().roles?[role.name == "Super Admin"])
}

model OrderItem {
  id                    String                    @id @default(cuid())
  orderId               String
  itemId                String
  quickbooksOrderLineId String?                   @unique
  
  // New fields from QBO Invoice Line
  lineDescription       String?                   @db.Text
  lineAmount            Decimal?                  @db.Decimal(10, 2)
  taxCode               String?
  
  // Existing fields
  quantity              Int
  pricePerItem          Decimal                   @db.Decimal(10, 2)
  itemStatus            OrderItemProcessingStatus @default(NOT_STARTED_PRODUCTION)
  notes                 String?
  
  // Product association for spacover items
  productId             String?

  order                 Order                     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  item                  Item                      @relation(fields: [itemId], references: [id])
  product               Product?                  @relation(fields: [productId], references: [id])
  processingLogs        ItemProcessingLog[]

  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt

  // Access Control Policies - PERMISSION-BASED (Warehouse operations)
  @@allow('create', auth() != null && auth().roles?[role.permissions?[permission.action == "create" && permission.subject == "OrderItem"]])
  @@allow('read', auth() != null && auth().roles?[role.permissions?[permission.action == "read" && permission.subject == "OrderItem"]])
  @@allow('update', auth() != null && auth().roles?[role.permissions?[permission.action == "update" && permission.subject == "OrderItem"]])
  @@allow('delete', auth() != null && auth().roles?[role.permissions?[permission.action == "delete" && permission.subject == "OrderItem"]])
  
  // ROLE-BASED fallback: Super Admin always has access
  @@allow('all', auth() != null && auth().roles?[role.name == "Super Admin"])
}

model ItemProcessingLog {
  id                String    @id @default(cuid())
  orderItemId       String
  orderItem         OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  stationId         String
  station           Station   @relation(fields: [stationId], references: [id])
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  startTime         DateTime
  endTime           DateTime? // NULL means currently in progress
  durationInSeconds Int?      // Calculated when endTime is set
  notes             String?   @db.Text

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Access Control Policies - PERMISSION-BASED (Critical for warehouse tracking)
  @@allow('create', auth() != null && auth().roles?[role.permissions?[permission.action == "create" && permission.subject == "ItemProcessingLog"]])
  @@allow('read', auth() != null && auth().roles?[role.permissions?[permission.action == "read" && permission.subject == "ItemProcessingLog"]])
  @@allow('update', auth() != null && auth().roles?[role.permissions?[permission.action == "update" && permission.subject == "ItemProcessingLog"]])
  @@allow('delete', auth() != null && auth().roles?[role.permissions?[permission.action == "delete" && permission.subject == "ItemProcessingLog"]])
  
  // ROLE-BASED fallback: Super Admin always has access
  @@allow('all', auth() != null && auth().roles?[role.name == "Super Admin"])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull) // SetNull if user is deleted
  action     String   // e.g., "USER_LOGIN", "UPDATE_ORDER_STATUS"
  entityName String?  // e.g., "Order", "User"
  entityId   String?  // PK of the affected entity
  oldValue   Json?    // Stores previous state for updates
  newValue   Json?    // Stores new state for updates/creates
  ipAddress  String?
  timestamp  DateTime @default(now())

  @@index([entityName, entityId])
  @@index([userId])
  @@index([action])

  // Access Control Policies - SECURITY SENSITIVE (Admin-only)
  @@allow('all', auth() != null && auth().roles?[role.name == "Super Admin"])
  @@allow('read', auth() != null && auth().roles?[role.name == "Admin"]) // Admins can view audit logs
}
// Better Auth Models
model Session {
  id            String   @id @default(cuid()) // Assuming cuid for consistency, though BA might use something else
  expiresAt     DateTime
  token         String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  ipAddress     String?
  userAgent     String?
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersontedBy String?

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid()) // Assuming cuid for consistency
  accountId             String    // Provider specific account ID
  providerId            String    // e.g., "github", "google"
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text // Access tokens can be long
  refreshToken          String?   @db.Text // Refresh tokens can be long
  idToken               String?   @db.Text // ID tokens can be long
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?   // Potentially for provider-specific app passwords?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([providerId, accountId]) // Ensures unique account per provider for a user
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid()) // Assuming cuid for consistency
  identifier String    // e.g., email address or user ID
  value      String   @unique // Verification token should be unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model QuickbooksToken {
  id                     String   @id @default(cuid())
  realmId                String
  accessToken            String   @db.Text
  refreshToken           String   @db.Text
  tokenType              String
  expiresIn              Int
  xRefreshTokenExpiresIn Int
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id])
  userId                 String   @unique

  @@allow('all', auth() != null && userId == auth().id)
}

model Estimate {
  id                   String         @id @default(cuid())
  quickbooksEstimateId String         @unique
  customerId           String
  estimateNumber       String?
  transactionDate      DateTime?
  expirationDate       DateTime?
  totalAmount          Decimal        @db.Decimal(10, 2)

  customer             Customer       @relation(fields: [customerId], references: [id])
  items                EstimateItem[]
  linkedOrder          Order?

  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  @@allow('all', auth() != null && auth().roles?[role.name == "Super Admin"])
}

model EstimateItem {
  id                       String   @id @default(cuid())
  estimateId               String
  itemId                   String
  quickbooksEstimateLineId String?  @unique
  lineDescription          String?  @db.Text
  quantity                 Int
  pricePerItem             Decimal  @db.Decimal(10, 2)

  estimate                 Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)
  item                     Item     @relation(fields: [itemId], references: [id])

  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@allow('all', auth() != null && auth().roles?[role.name == "Super Admin"])
}
