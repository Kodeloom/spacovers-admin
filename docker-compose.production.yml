# OPTIONAL: Docker Compose for Production Multi-Service Setup
# This file is NOT REQUIRED for single-container deployments (like Coolify)
# For single-container deployment, use the Dockerfile directly
# This compose file is provided for complex multi-service production setups

version: '3.8'

services:
  # Main application - can run independently without other services
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: warehouse-admin-app
    restart: unless-stopped
    ports:
      - "3000:3000"  # Expose port for direct access
    environment:
      - NODE_ENV=production
      # Use external database URL if postgres service is not used
      - DATABASE_URL=${DATABASE_URL:-postgresql://warehouse_user:${DB_PASSWORD}@postgres:5432/warehouse_admin}
      - BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET}
      - BETTER_AUTH_URL=${BETTER_AUTH_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SES_REGION=${AWS_SES_REGION}
      - FROM_EMAIL=${FROM_EMAIL}
    # Optional dependency - app can run without local postgres if external DB is used
    depends_on:
      postgres:
        condition: service_healthy
        required: false
    networks:
      - warehouse-network
    volumes:
      - app-logs:/app/logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.warehouse-admin.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.warehouse-admin.tls=true"
      - "traefik.http.routers.warehouse-admin.tls.certresolver=letsencrypt"

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: warehouse-admin-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=warehouse_admin
      - POSTGRES_USER=warehouse_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - warehouse-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U warehouse_user -d warehouse_admin"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "127.0.0.1:5432:5432"  # Only accessible from localhost

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: warehouse-admin-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - warehouse-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: warehouse-admin-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - warehouse-network

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: warehouse-admin-backup
    restart: "no"
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    networks:
      - warehouse-network
    depends_on:
      - postgres
    command: /bin/sh -c "chmod +x /backup.sh && /backup.sh"
    profiles:
      - backup

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: warehouse-admin-prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - warehouse-network
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: warehouse-admin-grafana
    restart: unless-stopped
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - warehouse-network
    profiles:
      - monitoring

networks:
  warehouse-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  app-logs:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local