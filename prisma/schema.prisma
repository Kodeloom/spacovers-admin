//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma-app/client"
}

enum UserStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum CustomerType {
  RETAILER
  CA_RETAIL
  WHOLESALER
  CA_WHOLESALE
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ItemStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum OrderSystemStatus {
  PENDING
  APPROVED
  ORDER_PROCESSING
  READY_TO_SHIP
  SHIPPED
  COMPLETED
  CANCELLED
}

enum OrderItemProcessingStatus {
  NOT_STARTED_PRODUCTION
  CUTTING
  SEWING
  FOAM_CUTTING
  READY
}

model User {
  id                 String              @id() @default(cuid())
  name               String
  email              String              @unique()
  contactNumber      String?
  passwordHash       String?
  emailVerified      Boolean?
  image              String?
  status             UserStatus          @default(ACTIVE)
  hourlyRate         Decimal?            @db.Decimal(10, 2)
  organizationId     String?
  banned             Boolean?
  banReason          String?
  banExpires         DateTime?
  roles              UserRole[]
  itemProcessingLogs ItemProcessingLog[]
  auditLogs          AuditLog[]
  sessions           Session[]
  accounts           Account[]
  quickbooksToken    QuickbooksToken?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt()
  role               String?

  @@map("user")
}

model RoleType {
  id                 String   @id() @default(cuid())
  name               String   @unique()
  description        String?
  color              String?
  canUseStations     Boolean  @default(false)
  isSystem           Boolean  @default(false)
  displayOrder       Int      @default(0)
  defaultPermissions Json?
  roles              Role[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt()
}

model Role {
  id          String           @id() @default(cuid())
  name        String           @unique()
  description String?
  roleTypeId  String?
  roleType    RoleType?        @relation(fields: [roleTypeId], references: [id], onDelete: SetNull)
  users       UserRole[]
  permissions RolePermission[]
  stations    RoleStation[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt()
}

model Permission {
  id          String           @id() @default(cuid())
  action      String
  subject     String
  description String?
  roles       RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt()

  @@unique([action, subject])
}

model UserRole {
  userId     String
  roleId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  assignedAt   DateTime   @default(now())

  @@id([roleId, permissionId])
}

model Customer {
  id                   String         @id() @default(cuid())
  quickbooksCustomerId String?        @unique()
  name                 String
  contactNumber        String?
  email                String?
  type                 CustomerType
  status               CustomerStatus @default(ACTIVE)
  shippingAddressLine1 String?
  shippingAddressLine2 String?
  shippingCity         String?
  shippingState        String?
  shippingZipCode      String?
  shippingCountry      String?
  billingAddressLine1  String?
  billingAddressLine2  String?
  billingCity          String?
  billingState         String?
  billingZipCode       String?
  billingCountry       String?
  orders               Order[]
  estimates            Estimate[]
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt()
}

model Item {
  id                String         @id() @default(cuid())
  quickbooksItemId  String?        @unique()
  name              String
  imageUrl          String?
  category          String?
  wholesalePrice    Decimal?       @db.Decimal(10, 2)
  retailPrice       Decimal?       @db.Decimal(10, 2)
  cost              Decimal?       @db.Decimal(10, 2)
  description       String?
  status            ItemStatus     @default(ACTIVE)
  isSpacoverProduct Boolean        @default(false)
  orderItems        OrderItem[]
  estimateItems     EstimateItem[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt()
}

model Product {
  id              String      @id() @default(cuid())
  size            String
  shape           String
  pieces          Int
  foamThickness   String
  skit            String
  tiedown         String
  color           String
  price           Decimal?    @db.Decimal(10, 2)
  fullDescription String      @unique()
  displayName     String
  orderItems      OrderItem[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt()
}

model Station {
  id                 String              @id() @default(cuid())
  name               String              @unique()
  barcode            String?             @unique()
  description        String?
  roles              RoleStation[]
  itemProcessingLogs ItemProcessingLog[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt()
}

model RoleStation {
  roleId     String
  stationId  String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  station    Station  @relation(fields: [stationId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@id([roleId, stationId])
}

model Order {
  id                   String            @id() @default(cuid())
  quickbooksOrderId    String?           @unique()
  customerId           String
  salesOrderNumber     String?
  purchaseOrderNumber  String?
  estimateId           String?           @unique()
  transactionDate      DateTime?
  dueDate              DateTime?
  shipDate             DateTime?
  trackingNumber       String?
  totalAmount          Decimal?          @db.Decimal(10, 2)
  balance              Decimal?          @db.Decimal(10, 2)
  totalTax             Decimal?          @db.Decimal(10, 2)
  emailStatus          String?
  customerMemo         String?           @db.Text()
  contactEmail         String
  contactPhoneNumber   String?
  billingAddressLine1  String?
  billingAddressLine2  String?
  billingCity          String?
  billingState         String?
  billingZipCode       String?
  billingCountry       String?
  shippingAddressLine1 String?
  shippingAddressLine2 String?
  shippingCity         String?
  shippingState        String?
  shippingZipCode      String?
  shippingCountry      String?
  orderStatus          OrderSystemStatus @default(PENDING)
  barcode              String?           @unique()
  approvedAt           DateTime?
  readyToShipAt        DateTime?
  shippedAt            DateTime?
  notes                String?
  customer             Customer          @relation(fields: [customerId], references: [id])
  items                OrderItem[]
  estimate             Estimate?         @relation(fields: [estimateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt()
}

model OrderItem {
  id                    String                    @id() @default(cuid())
  orderId               String
  itemId                String
  quickbooksOrderLineId String?                   @unique()
  lineDescription       String?                   @db.Text()
  lineAmount            Decimal?                  @db.Decimal(10, 2)
  taxCode               String?
  quantity              Int
  pricePerItem          Decimal                   @db.Decimal(10, 2)
  itemStatus            OrderItemProcessingStatus @default(NOT_STARTED_PRODUCTION)
  notes                 String?
  productId             String?
  order                 Order                     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  item                  Item                      @relation(fields: [itemId], references: [id])
  product               Product?                  @relation(fields: [productId], references: [id])
  processingLogs        ItemProcessingLog[]
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt()
}

model ItemProcessingLog {
  id                String    @id() @default(cuid())
  orderItemId       String
  orderItem         OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  stationId         String
  station           Station   @relation(fields: [stationId], references: [id])
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  startTime         DateTime
  endTime           DateTime?
  durationInSeconds Int?
  notes             String?   @db.Text()
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt()
}

model AuditLog {
  id         String   @id() @default(cuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action     String
  entityName String?
  entityId   String?
  oldValue   Json?
  newValue   Json?
  ipAddress  String?
  timestamp  DateTime @default(now())

  @@index([entityName, entityId])
  @@index([userId])
  @@index([action])
}

model Session {
  id            String   @id() @default(cuid())
  expiresAt     DateTime
  token         String   @unique()
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()
  ipAddress     String?
  userAgent     String?
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersontedBy String?

  @@map("session")
}

model Account {
  id                    String    @id() @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text()
  refreshToken          String?   @db.Text()
  idToken               String?   @db.Text()
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt()

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String   @id() @default(cuid())
  identifier String
  value      String   @unique()
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()

  @@map("verification")
}

model QuickbooksToken {
  id                     String   @id() @default(cuid())
  realmId                String
  accessToken            String   @db.Text()
  refreshToken           String   @db.Text()
  tokenType              String
  expiresIn              Int
  xRefreshTokenExpiresIn Int
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt()
  user                   User     @relation(fields: [userId], references: [id])
  userId                 String   @unique()
}

model Estimate {
  id                   String         @id() @default(cuid())
  quickbooksEstimateId String         @unique()
  customerId           String
  estimateNumber       String?
  transactionDate      DateTime?
  expirationDate       DateTime?
  totalAmount          Decimal        @db.Decimal(10, 2)
  customer             Customer       @relation(fields: [customerId], references: [id])
  items                EstimateItem[]
  linkedOrder          Order?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt()
}

model EstimateItem {
  id                       String   @id() @default(cuid())
  estimateId               String
  itemId                   String
  quickbooksEstimateLineId String?  @unique()
  lineDescription          String?  @db.Text()
  quantity                 Int
  pricePerItem             Decimal  @db.Decimal(10, 2)
  estimate                 Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)
  item                     Item     @relation(fields: [itemId], references: [id])
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt()
}
